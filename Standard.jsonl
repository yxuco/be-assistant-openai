{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the maximum history value since the specified time."}, {"role": "assistant", "content": "Object Temporal.Numeric.maxSince(PropertyAtom pa, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the maximum value of the last n history entries."}, {"role": "assistant", "content": "Object Temporal.Numeric.maxOfLast(PropertyAtom pa, int last_n_times)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the sum of all the values in the history of a property atom."}, {"role": "assistant", "content": "long Temporal.Numeric.addAllHistoryLong(PropertyAtomLong pal, long t)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method calculates the sum of the history value since the specified time."}, {"role": "assistant", "content": "Object Temporal.Numeric.totalSince(PropertyAtom pa, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method calculates the average of the value of the last n history entries."}, {"role": "assistant", "content": "Object Temporal.Numeric.avgOfLast(PropertyAtom pa, int last_n_times)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns interpolated value over the history a given number of msec ago"}, {"role": "assistant", "content": "double Temporal.Numeric.interpolateDouble(PropertyAtomDouble pad, long no_of_milli_seconds_ago)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns interpolated value over the history a given number of msec ago"}, {"role": "assistant", "content": "double Temporal.Numeric.interpolateInt(PropertyAtomInt pai, long no_of_milli_seconds_ago)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the minimum value of the last n history entries."}, {"role": "assistant", "content": "Object Temporal.Numeric.minOfLast(PropertyAtom pa, int last_n_times)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the sum of all the values in the history of a property atom."}, {"role": "assistant", "content": "double Temporal.Numeric.addAllHistoryDouble(PropertyAtomDouble pad, long t)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method calculates the average history value since the specified time."}, {"role": "assistant", "content": "Object Temporal.Numeric.avgSince(PropertyAtom pa, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the minimum history value since the specified time."}, {"role": "assistant", "content": "Object Temporal.Numeric.minSince(PropertyAtom pa, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the sum of all the values in the history of a property atom."}, {"role": "assistant", "content": "int Temporal.Numeric.addAllHistoryInt(PropertyAtomInt pai, long t)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method calculates the sum of the value of the last n history entries."}, {"role": "assistant", "content": "Object Temporal.Numeric.totalOfLast(PropertyAtom pa, int last_n_times)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns interpolated value over the history a given number of msec ago"}, {"role": "assistant", "content": "double Temporal.Numeric.interpolateLong(PropertyAtomLong pal, long no_of_milli_seconds_ago)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property always decrease over a given time interval [stime, etime].\nReturns true only if each sample value is less than the immediately prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.alwaysDecreasingInt(PropertyAtomInt pai, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns how old is the oldest value in the PropertyAtom history."}, {"role": "assistant", "content": "long Temporal.History.howOld(PropertyAtom pa)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property ever decrease over a given time interval [stime, etime].\nReturns true only if any sample value is less than any prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.everDecreasingDouble(PropertyAtomDouble pad, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property always increase over a given time interval [stime, etime].\nReturns true only if each sample value is greater than the immediately prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.alwaysIncreasingLong(PropertyAtomLong pal, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property ever increase over a given time interval [stime, etime].\nReturns true only if any sample value is greater than any prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.everIncreasingDouble(PropertyAtomDouble pad, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the previous value of a PropertyAtom."}, {"role": "assistant", "content": "Object Temporal.History.previous(PropertyAtom pad)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property always increase over a given time interval [stime, etime].\nReturns true only if each sample value is greater than the immediately prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.alwaysIncreasingInt(PropertyAtomInt pai, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the previous value of PropertyAtomDouble"}, {"role": "assistant", "content": "double Temporal.History.previousDouble(PropertyAtomDouble pad)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns how many history values exist for given property in last number of msec ago.\nThe value is bounded by history size."}, {"role": "assistant", "content": "int Temporal.History.howManyInLast(PropertyAtom pa, long num_msec_ago)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property ever decrease over a given time interval [stime, etime].\nReturns true only if any sample value is less than any prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.everDecreasingInt(PropertyAtomInt pai, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property value remain steady over a given time interval[stime, etime]."}, {"role": "assistant", "content": "boolean Temporal.History.steadyDouble(PropertyAtomDouble pad, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the previous value of PropertyAtomLong"}, {"role": "assistant", "content": "long Temporal.History.previousLong(PropertyAtomLong pal)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the previous value of PropertyAtomInt"}, {"role": "assistant", "content": "int Temporal.History.previousInt(PropertyAtomInt pai)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns how old is the newest value in the PropertyAtom history."}, {"role": "assistant", "content": "long Temporal.History.howCurrent(PropertyAtom pa)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property ever increase over a given time interval [stime, etime].\nReturns true only if any sample value is greater than any prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.everIncreasingLong(PropertyAtomLong pal, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property ever increase over a given time interval [stime, etime].\nReturns true only if any sample value is greater than any prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.everIncreasingInt(PropertyAtomInt pai, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property value remain steady over a given time interval[stime, etime]."}, {"role": "assistant", "content": "boolean Temporal.History.steadyInt(PropertyAtomInt pai, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns PropertyAtom value a given number of milli seconds ago"}, {"role": "assistant", "content": "Object Temporal.History.history(PropertyAtom pad, long no_of_milli_seconds_ago)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property always decrease over a given time interval [stime, etime].\nReturns true only if each sample value is less than the immediately prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.alwaysDecreasingDouble(PropertyAtomDouble pad, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property always increase over a given time interval [stime, etime].\nReturns true only if each sample value is greater than the immediately prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.alwaysIncreasingDouble(PropertyAtomDouble pad, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property ever decrease over a given time interval [stime, etime].\nReturns true only if any sample value is less than any prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.everDecreasingLong(PropertyAtomLong pal, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns PropertyAtomInt value a given number of milli seconds ago"}, {"role": "assistant", "content": "double Temporal.History.historyInt(PropertyAtomInt pai, long no_of_milli_seconds_ago)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns how many values exist in interval [stime, etime]."}, {"role": "assistant", "content": "int Temporal.History.howMany(PropertyAtom pa, long stime, long etime, boolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property always decrease over a given time interval [stime, etime].\nReturns true only if each sample value is less than the immediately prior sample value in the given time interval.\nAll the times are in milliseconds."}, {"role": "assistant", "content": "boolean Temporal.History.alwaysDecreasingLong(PropertyAtomLong pal, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns PropertyAtomDouble value a given number of milli seconds ago"}, {"role": "assistant", "content": "double Temporal.History.historyDouble(PropertyAtomDouble pad, long no_of_milli_seconds_ago)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if samples of the property value remain steady over a given time interval[stime, etime]."}, {"role": "assistant", "content": "boolean Temporal.History.steadyLong(PropertyAtomLong pal, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns PropertyAtomLong value a given number of milli seconds ago"}, {"role": "assistant", "content": "double Temporal.History.historyLong(PropertyAtomLong pal, long no_of_milli_seconds_ago)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns how many history values exist for given property since\nthe specified time.\nThe value is bounded by history size."}, {"role": "assistant", "content": "int Temporal.History.howManySince(PropertyAtom pa, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method counts the number of object which match a specified value since the specified time."}, {"role": "assistant", "content": "int Temporal.Statistic.numMatchSince(PropertyAtom pa, Object matchValue, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method counts the number of object which matches a specified value over the last n history entries."}, {"role": "assistant", "content": "int Temporal.Statistic.numMatchOverLast(PropertyAtom pa, Object matchValue, int last_n_times)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the maximum value of samples of a PropertyAtomDouble over a given time interval[stime, etime]."}, {"role": "assistant", "content": "double Temporal.Statistic.maxOverTimeDouble(PropertyAtomDouble pad, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the sum of samples of the history of a property atom over a given\ntime interval [stime, etime]."}, {"role": "assistant", "content": "double Temporal.Statistic.sumDouble(PropertyAtomDouble pad, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method calculates the average of samples of the property over a given time interval[stime, etime]."}, {"role": "assistant", "content": "double Temporal.Statistic.avgOverTimeInt(PropertyAtomInt pai, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the sum of samples of the history of a property atom over a given\ntime interval [stime, etime]."}, {"role": "assistant", "content": "int Temporal.Statistic.sumInt(PropertyAtomInt pai, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the maximum value of samples of a PropertyAtomInt over a given time interval[stime, etime]."}, {"role": "assistant", "content": "int Temporal.Statistic.maxOverTimeInt(PropertyAtomInt pai, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the minimum value of samples of a PropertyAtomLong over a given time interval[stime, etime]."}, {"role": "assistant", "content": "long Temporal.Statistic.minOverTimeLong(PropertyAtomLong pal, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method calculates the average of samples of the property over a given time interval[stime, etime]."}, {"role": "assistant", "content": "double Temporal.Statistic.avgOverTimeDouble(PropertyAtomDouble pad, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the minimum value of samples of a PropertyAtomInt over a given time interval[stime, etime]."}, {"role": "assistant", "content": "int Temporal.Statistic.minOverTimeInt(PropertyAtomInt pai, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the minimum value of samples of a PropertyAtomDouble over a given time interval[stime, etime]."}, {"role": "assistant", "content": "double Temporal.Statistic.minOverTimeDouble(PropertyAtomDouble pad, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the sum of samples of the history of a property atom over a given\ntime interval [stime, etime]."}, {"role": "assistant", "content": "long Temporal.Statistic.sumLong(PropertyAtomLong pal, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method calculates the average of samples of the property over a given time interval[stime, etime]."}, {"role": "assistant", "content": "double Temporal.Statistic.avgOverTimeLong(PropertyAtomLong pal, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the maximum value of samples of a PropertyAtomLong over a given time interval[stime, etime]."}, {"role": "assistant", "content": "long Temporal.Statistic.maxOverTimeLong(PropertyAtomLong pal, long stime, long etime, int sample_interval,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the integral of values in the history of a property atom over a given\ntime interval [stime, etime]. we are dealing with discrete steps so just a summation of all the terms each\nmultiplied with the interval(milliseconds) is sufficient."}, {"role": "assistant", "content": "long Temporal.Calculus.integralLong(PropertyAtomLong pal, long stime, long etime, int sample_rate,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method performs a least-squares fit of a straight line (Y = mX +b) and returns the\nvalue of the slope of the line (m) as the rate of change of the given PorpertyAtomLong over the time\ninterval[stime, etime].  All the times are in (milliseconds)."}, {"role": "assistant", "content": "double Temporal.Calculus.rateOfChangeLong(PropertyAtomLong pal, long stime, long etime, int sample_rate,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the integral of values in the history of a property atom over a given\ntime interval [stime, etime]; we are dealing with discrete steps so just a summation of all the terms each\nmultiplied with the interval(milliseconds) is sufficient."}, {"role": "assistant", "content": "double Temporal.Calculus.integralDouble(PropertyAtomDouble pad, long stime, long etime, int sample_rate,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method performs a least-squares fit of a straight line (Y = mX +b) and returns the\nvalue of the slope of the line (m) as the rate of change of the given PorpertyAtomInt over the time\ninterval[stime, etime].  All the times are in (milliseconds)."}, {"role": "assistant", "content": "double Temporal.Calculus.rateOfChangeDouble(PropertyAtomDouble pad, long stime, long etime, int sample_rate,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the integral of values in the history of a property atom over a given\ntime interval [stime, etime]; we are dealing with discrete steps so just a summation of all the terms\neach multiplied with the interval(milliseconds) is sufficient."}, {"role": "assistant", "content": "int Temporal.Calculus.integralInt(PropertyAtomInt pai, long stime, long etime, int sample_rate,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method performs a least-squares fit of a straight line (Y = mX +b) and returns the\nvalue of the slope of the line (m) as the rate of change of the given PorpertyAtomInt over the time\ninterval[stime, etime].  All the times are in (milliseconds)."}, {"role": "assistant", "content": "double Temporal.Calculus.rateOfChangeInt(PropertyAtomInt pai, long stime, long etime, int sample_rate,\nboolean bound_by_stime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "java.util.Collection"}, {"role": "assistant", "content": "void Cluster.sendMessagesOverLocalNamedPipe(String pipeName, Object collection)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This function runs a ruleFunction continously as per the return status of the ruleFunction"}, {"role": "assistant", "content": "void Cluster.runRuleFunction(String workMgrName, String ruleFnURI, Object[] args,  boolean bInPreprocessContext)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "null"}, {"role": "assistant", "content": "Object Cluster.pollMessageFromLocalNamedPipe(String pipeName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This function returns true if the passed event is received from another agent in the cluster.\nThe function will return false if the event was created in this agent."}, {"role": "assistant", "content": "boolean Cluster.isEventRecovered(SimpleEvent evt)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This function runs a rule function inside the context of a work manager"}, {"role": "assistant", "content": "void Cluster.runRuleFunction(String workMgrName, String ruleFnURI, boolean bInPreprocessContext, Object... args)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a per-JVM in-memory blocking queue/pipe for inter-thread communication."}, {"role": "assistant", "content": "boolean Cluster.createLocalNamedPipe(String pipeName, int capacity)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the design time URI for the typeId"}, {"role": "assistant", "content": "String Cluster.typeIdToURI(int typeId)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Register a rule function to pre-process state machine timeouts. The pre-processor should be used to load and/or\nlock associated objects."}, {"role": "assistant", "content": "void Cluster.registerStateMachineTimeoutCallback(String entityURI, String ruleFunctionURI)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the site-id of the cluster"}, {"role": "assistant", "content": "long Cluster.getSiteId()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the unique id of the agent"}, {"role": "assistant", "content": "int Cluster.getAgentId()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the name of the BE Agent"}, {"role": "assistant", "content": "String Cluster.getAgentName()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Shuts down the work manager. This call will wait for all the current jobs to finish"}, {"role": "assistant", "content": "void Cluster.stopWorkManager(String name)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a work manager to schedule background jobs"}, {"role": "assistant", "content": "void Cluster.createWorkManager(String name, int threadPool)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a cluster wide scheduler for time dependent jobs. If the scheduler is created by another node, then the method can be used to overwrite\nthe pollInterval and refreshAhead"}, {"role": "assistant", "content": "void Cluster.createScheduler(String schedulerName, long pollInterval, long refreshAhead)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes a previously scheduled task"}, {"role": "assistant", "content": "void Cluster.removeSchedule(String schedulerName, String workKey)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Send a message over the pipe. If the pipe is full, then this call blocks until\nspace is available to place this message in the queue."}, {"role": "assistant", "content": "void Cluster.sendMessageOverLocalNamedPipe(String pipeName, Object message)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "null"}, {"role": "assistant", "content": "Object Cluster.waitForMessageFromLocalNamedPipe(String pipeName, long timeoutMillis)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the scheduled time of the entry identified with the key."}, {"role": "assistant", "content": "long Cluster.getScheduleTime(String schedulerName, String workKey)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Retrieves the current size of the pipe."}, {"role": "assistant", "content": "int Cluster.getLocalNamedPipeCurrentSize(String pipeName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the name of the BE cluster that this agent is connected"}, {"role": "assistant", "content": "String Cluster.getClusterName()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "scheduledTime"}, {"role": "assistant", "content": "void Cluster.scheduleEvent(String schedulerName, String workKey, SimpleEvent event, long scheduledTime)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "startingDate"}, {"role": "assistant", "content": "void Cluster.scheduleRepeatingEvent(String schedulerName, String workKey, SimpleEvent event, DateTime startingDate, long interval)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Retrieve from the cache the event whose identifier is specified"}, {"role": "assistant", "content": "Event Cluster.DataGrid.CacheLoadEventById(Object id)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates an index on the property"}, {"role": "assistant", "content": "void Cluster.DataGrid.Index(String cacheName, Object property, boolean isOrdered)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "UnLocks the object represented by the key within a rule session."}, {"role": "assistant", "content": "void Cluster.DataGrid.UnLock(String key, boolean localOnly)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Execute a query/filter based eviction from cache. Strictly to be used for entities with cache-only object management.\nIt will work only if \"Store Properties As Individual Fields\" is enabled in the CDD cluster setting.\nIt will not work with the history based properties."}, {"role": "assistant", "content": "void Cluster.DataGrid.EvictCache(String cacheName, Object filter, boolean deleteFromPersistence)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the generated class name"}, {"role": "assistant", "content": "String Cluster.DataGrid.ClassName(String entityPath)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Retrieve from the cache the concept whose identifier is specified"}, {"role": "assistant", "content": "Concept Cluster.DataGrid.CacheLoadConceptById(Object id, boolean includeContained)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Set to true if the current RTC changes be replicated to the cache else RTC changes will lead to cache eviction instead of updates"}, {"role": "assistant", "content": "void Cluster.DataGrid.EnableCacheUpdate(boolean updateCache)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Loads the entity into RETE and reevaluates all rules (allowed only in preprocessor)"}, {"role": "assistant", "content": "void Cluster.DataGrid.CacheReevaluate(Entity entity)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Loads from cache the parent concepts of the given concept."}, {"role": "assistant", "content": "void Cluster.DataGrid.CacheLoadParent(Concept cept, boolean recursive)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Load the entity into RETE"}, {"role": "assistant", "content": "void Cluster.DataGrid.CacheLoadEntity(Entity entity)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Locks the object within a rule session. This call will wait for timeout . The timeout value of zero indicates wait indefinitely"}, {"role": "assistant", "content": "boolean Cluster.DataGrid.Lock(String key, long timeout, boolean localOnly)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "entityPath"}, {"role": "assistant", "content": "String Cluster.DataGrid.CacheName(String entityPath)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a sequence across the cluster. If the sequence already exists, the call is ignored internally."}, {"role": "assistant", "content": "void Cluster.Sequence.createSequence(String sequenceName, long start, long end, int cacheSize, boolean useDB)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the next sequence number"}, {"role": "assistant", "content": "Long Cluster.Sequence.nextSequence(String sequenceName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Resets a sequence across the cluster"}, {"role": "assistant", "content": "void Cluster.Sequence.resetSequence(String sequenceName, long start)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes a sequence across the cluster"}, {"role": "assistant", "content": "void Cluster.Sequence.removeSequence(String sequenceName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Evaluate an XPath Expression against the input event."}, {"role": "assistant", "content": "String XPath.executeWithEvent (String xpath, Event event, String prefixes)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Evaluate the xpath expression on the objects as specified in XPathbuilder."}, {"role": "assistant", "content": "String XPath.evalAsString (String path)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Evaluate an XPath Expression against the input XML String."}, {"role": "assistant", "content": "String XPath.execute (String xpath, String xml, String prefixes)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Evaluate the xpath expression on the objects as specified in XPathbuilder."}, {"role": "assistant", "content": "long XPath.evalAsLong (String path)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Evaluate the xpath expression on the objects as specified in XPathbuilder."}, {"role": "assistant", "content": "DateTime XPath.evalAsDateTime (String path)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Evaluate the xpath expression on the objects as specified in XPathbuilder."}, {"role": "assistant", "content": "double XPath.evalAsDouble (String path)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Evaluate an XPath Expression against the input event."}, {"role": "assistant", "content": "String[] XPath.executeXPathWithEvent (String xpath, Event event, String prefixes)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Evaluate the xpath expression on the objects as specified in XPathbuilder."}, {"role": "assistant", "content": "boolean XPath.evalAsBoolean (String path)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Evaluate the xpath expression on the objects as specified in XPathbuilder."}, {"role": "assistant", "content": "int XPath.evalAsInt (String path) and return an int."}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Tests whether the file or directory denoted by the specified path exists."}, {"role": "assistant", "content": "boolean File.fileExists (String path)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Read the contents of the specified file and return a"}, {"role": "assistant", "content": "Object File.readFileAsBytes (String filePath)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an array of files from the target directory that match the specified filter/pattern."}, {"role": "assistant", "content": "String[] File.listFiles (String dirPath, String filter)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Renames the specified file or directory."}, {"role": "assistant", "content": "boolean File.fileRename (String srcPath, String destPath)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Writes the new line to the file as a sequence of bytes starting at the current file-pointer position."}, {"role": "assistant", "content": "void File.fileWriteLine (Object fileWriter, String str)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Open the specified file for reading, and optionally, writing."}, {"role": "assistant", "content": "Object File.openFile (String path, String mode)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Deletes the specified file or directory."}, {"role": "assistant", "content": "boolean File.fileRemove (String path)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Truncate existing file and write any new contents."}, {"role": "assistant", "content": "void File.fileTruncateAndWrite(Object fileWriter, Object byteContents)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the length of the specified file (in bytes)."}, {"role": "assistant", "content": "long File.fileLength (Object writerReader)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Reads the next line of text from the specified file."}, {"role": "assistant", "content": "String File.fileReadLine (Object fileReader)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Closes the file that was previously opened with File.openFile()."}, {"role": "assistant", "content": "void File.fileClose (Object writerReader)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "byte[]"}, {"role": "assistant", "content": "void File.fileWrite (Object fileWriter, Object bytes)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the file-pointer offset at which the next read or write will occur."}, {"role": "assistant", "content": "void File.fileSeek (Object writerReader, long pos)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Read the contents of the specified file and return a string."}, {"role": "assistant", "content": "String File.readFileAsString(String filePath, [String encoding = $1UTF-8$1])"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a folder structure on the file system for this filepath"}, {"role": "assistant", "content": "boolean File.createFolders(String directoryPath, String folderPath)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a folder on the file system"}, {"role": "assistant", "content": "boolean File.createFolder(String directoryPath, String folderName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Writes the string to the file as a sequence of bytes starting at the current file-pointer position."}, {"role": "assistant", "content": "void File.fileWrite (Object fileWriter, String str)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a number of weeks to a DateTime and returns the result. The input DateTime is not modified."}, {"role": "assistant", "content": "DateTime DateTime.addWeek (DateTime date, int weeks)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Return the DateTime passed as a formatted String."}, {"role": "assistant", "content": "String DateTime.format (DateTime d1, String format)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "date"}, {"role": "assistant", "content": "DateTime DateTime.parseStringWithTimeZone (String date, String format)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Return the current system time as a DateTime."}, {"role": "assistant", "content": "DateTime DateTime.now ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a number of seconds to a DateTime and returns the result. The input DateTime is not modified."}, {"role": "assistant", "content": "DateTime DateTime.addSecond (DateTime date, int seconds)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the second on the DateTime Object passed as input."}, {"role": "assistant", "content": "int DateTime.getSecond(DateTime date)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create a DateTime object of a particular timezone.   Month value is 0-based. 0 for January, 11 for December."}, {"role": "assistant", "content": "DateTime DateTime.createTime(int year, int month, int date, int hrs, int min, int sec, String tz)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the time in milliseconds since the start of 1970 GMT."}, {"role": "assistant", "content": "long DateTime.getTimeInMillis (DateTime date)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "date"}, {"role": "assistant", "content": "DateTime DateTime.parseString (String date, String format)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "after"}, {"role": "assistant", "content": "boolean DateTime.after (DateTime d1, DateTime d2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a number of hours to a DateTime and returns the result. The input DateTime is not modified."}, {"role": "assistant", "content": "DateTime DateTime.addHour(DateTime date, int hours)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the minute on the DateTime Object passed as input."}, {"role": "assistant", "content": "int DateTime.getMinute(DateTime date)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a number of years to a DateTime and returns the result. The input DateTime is not modified."}, {"role": "assistant", "content": "DateTime DateTime.addYear (DateTime date, int years)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the date on the DateTime Object passed as input."}, {"role": "assistant", "content": "int DateTime.getDate(DateTime date)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Test if the first DateTime the same as the second DateTime."}, {"role": "assistant", "content": "boolean DateTime.equals (DateTime d1, DateTime d2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the year on the DateTime Object passed as input."}, {"role": "assistant", "content": "int DateTime.getYear(DateTime date)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Translate a time to a new timezone and return the new translated DateTime object"}, {"role": "assistant", "content": "DateTime DateTime.translateTime(DateTime date, String tz)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Parses the time in milliseconds since the start of 1970 and return as a DateTime."}, {"role": "assistant", "content": "DateTime DateTime.parseLong(long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the timezone id from DateTime object."}, {"role": "assistant", "content": "String DateTime.getTimeZone(DateTime date, boolean daylight_saving_name)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Compares the date time values of the arguments."}, {"role": "assistant", "content": "boolean DateTime.notEquals (DateTime d1, DateTime d2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the hour on the DateTime Object passed as input."}, {"role": "assistant", "content": "int DateTime.getHour(DateTime date)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a number of months to a DateTime and returns the result. The input DateTime is not modified."}, {"role": "assistant", "content": "DateTime DateTime.addMonth (DateTime date, int months)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the month on the DateTime Object passed as input.  Month value is 0-based.\ni.e. 0 for January, 11 for December."}, {"role": "assistant", "content": "int DateTime.getMonth(DateTime date)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a number of days to a DateTime and returns the result. The input DateTime is not modified."}, {"role": "assistant", "content": "DateTime DateTime.addDay (DateTime date, int days)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Test if the first DateTime passed come before the second DateTime passed."}, {"role": "assistant", "content": "boolean DateTime.before (DateTime d1, DateTime d2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a number of minutes to a DateTime and returns the result. The input DateTime is not modified."}, {"role": "assistant", "content": "DateTime DateTime.addMinute (DateTime date, int minutes)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Test if the first date come $1after$1 the second date, independently of the time of day."}, {"role": "assistant", "content": "boolean Date.after (DateTime d1, DateTime d2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Return the current date time as a DateTime."}, {"role": "assistant", "content": "DateTime Date.today ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Test if the first date the same as the second date, independently of the time of day."}, {"role": "assistant", "content": "boolean Date.equals (DateTime d1, DateTime d2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Test if the first date come before the second date, independently of the time of day."}, {"role": "assistant", "content": "boolean Date.before (DateTime d1, DateTime d2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a body fragment as a child of the standard SOAP body.\nThis fragment should be a well formed xml."}, {"role": "assistant", "content": "void SOAP.addSOAPBodyPart (SimpleEvent soapEvent,String bodyXml)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a <fault> element to the standard SOAP body"}, {"role": "assistant", "content": "void SOAP.addFaultPart (SimpleEvent soapEvent,String faultCode,String faultMessage,String faultActor,String faultDetailString)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the content of the attachment in byte[] form.\nReturns a null if no attachment is found with the given content ID."}, {"role": "assistant", "content": "Object SOAP.getAttachmentContentByContentID(SimpleEvent soapEvent,String contentID)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the SOAP <Fault> element from the SOAP event"}, {"role": "assistant", "content": "String SOAP.getFault (SimpleEvent soapEvent)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the <faultcode> from the SOAP event."}, {"role": "assistant", "content": "String SOAP.getFaultCode (SimpleEvent soapEvent)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the <faultactor> from the SOAP event."}, {"role": "assistant", "content": "String SOAP.getFaultActor (SimpleEvent soapEvent)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the SOAP <Body> parts matching the name and namespace from the SOAP event"}, {"role": "assistant", "content": "String[] SOAP.getSOAPBodyParts (SimpleEvent soapEvent, String name, String namespace)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the String value content type of the attachment.\nThe attachment is specified using the index."}, {"role": "assistant", "content": "String SOAP.getAttachmentContentType(SimpleEvent soapEvent,int index)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets a count of SOAP attachments in the incoming SOAP message."}, {"role": "assistant", "content": "int SOAP.getNumberOfAttachments(SimpleEvent soapEvent)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the given attribute for the header part\nat the specified index in header body of the Simple event"}, {"role": "assistant", "content": "String SOAP.getSOAPHeaderAttribute (SimpleEvent soapEvent, int index, String attribute)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Add attribute to SOAP header"}, {"role": "assistant", "content": "void SOAP.addSOAPHeaderAttribute(SimpleEvent soapEvent,int index, String attribute, String value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a new correlation ID for use in request/response. This is used by some SOAP deserializers to generate events of specific types, instead of using the default event type resolution mechanisms."}, {"role": "assistant", "content": "void SOAP.newCorrelationId(String responseEventUri)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes 0 or more children of a SOAP <Header> of a SOAP message."}, {"role": "assistant", "content": "void SOAP.removeHeaderParts (SimpleEvent soapEvent, String actor)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Signs the entire SOAP Request envelope using the certificate information provided."}, {"role": "assistant", "content": "void SOAP.signSOAPEnvelope (SimpleEvent soapEvent, Object clientKeyStore, String trustedCertsFolder, String ksPassword, String alias)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Associates an event type to a given input destination, target service, and SOAP action. This is used by some SOAP deserializers to generate events of specific types, instead of using the default event type resolution mechanisms."}, {"role": "assistant", "content": "void SOAP.registerEventUri(String eventUri, String destinationUri, String serviceName, String soapAction, String preprocessor)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the String value content ID of the attachment.\nThe attachment is specified using the index."}, {"role": "assistant", "content": "String SOAP.getAttachmentContentID(SimpleEvent soapEvent,int index)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the standard SOAP envelope xml node from the\npayload of this SOAP event."}, {"role": "assistant", "content": "String SOAP.getEnvelope (SimpleEvent soapEvent)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a header fragment as a child of the standard SOAP header.\nThis fragment should be a well formed XML."}, {"role": "assistant", "content": "void SOAP.addHeaderPart (SimpleEvent soapEvent, String headerPartXml)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the <faultstring> from the SOAP event."}, {"role": "assistant", "content": "String SOAP.getFaultString (SimpleEvent soapEvent)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets a list of headers inside the <Header> element of a SOAP message."}, {"role": "assistant", "content": "String[] SOAP.getHeaders(SimpleEvent soapEvent, String actor, boolean removeHeaders)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a new attachment to the SOAP message."}, {"role": "assistant", "content": "void SOAP.addAttachment(SimpleEvent soapEvent,String contentID, Object content,String contentType)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes 0 or more children of a SOAP <Header> of a SOAP message."}, {"role": "assistant", "content": "void SOAP.removeHeaderPart (SimpleEvent soapEvent, String namespace, String name)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the content of the attachment in byte[] form.\nThe attachment is specified using the index. will return null in case of no attachment"}, {"role": "assistant", "content": "Object SOAP.getAttachmentContent(SimpleEvent soapEvent,int index)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets all SOAP <Body> parts from the SOAP event"}, {"role": "assistant", "content": "String[] SOAP.getAllSOAPBodyParts (SimpleEvent soapEvent)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the arc tangent of an angle, in the range of -pi/2\nthrough pi/ 2.  Special cases:\nIf the argument is NaN, then the result is NaN.\nIf the argument is zero, then the result is a zero with the\nsame sign as the argument.\nA result must be within 1 ulp of the correctly rounded result.  Results\nmust be semi-monotonic."}, {"role": "assistant", "content": "double Math.atan (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the arc sine of an angle, in the range of -pi/2 through\npi/2. Special cases:\nIf the argument is NaN or its absolute value is greater\nthan 1, then the result is NaN.\nIf the argument is zero, then the result is a zero with the\nsame sign as the argument.\nA result must be within 1 ulp of the correctly rounded result.  Results\nmust be semi-monotonic."}, {"role": "assistant", "content": "double Math.asin (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "double"}, {"role": "assistant", "content": "double Math.rint (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "y/x"}, {"role": "assistant", "content": "double Math.atanRectangularToPolar (double y, double x)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "cos(toRadians(90.0))"}, {"role": "assistant", "content": "double Math.toDegrees (double angrad)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "long"}, {"role": "assistant", "content": "long Math.round (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the trigonometric cosine of an angle. Special cases:\nIf the argument is NaN or an infinity, then the result is NaN.\nA result must be within 1 ulp of the correctly rounded result.  Results\nmust be semi-monotonic."}, {"role": "assistant", "content": "double Math.cos (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "d1"}, {"role": "assistant", "content": "double Math.roundFraction (double d1, int precision)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "double"}, {"role": "assistant", "content": "double Math.sqrt (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "double"}, {"role": "assistant", "content": "double Math.pow (double a, double b)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "double"}, {"role": "assistant", "content": "double Math.exp (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "double"}, {"role": "assistant", "content": "double Math.maxDouble (double a, double b)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Converts an angle measured in degrees to an approximately\nequivalent angle measured in radians.  The conversion from\ndegrees to radians is generally inexact."}, {"role": "assistant", "content": "double Math.toRadians (double angdeg)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "int"}, {"role": "assistant", "content": "int Math.maxInt (int a, int b)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "double"}, {"role": "assistant", "content": "double Math.ceil (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "int"}, {"role": "assistant", "content": "int Math.minInt (int a, int b)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the absolute value of a double value.\nIf the argument is not negative, the argument is returned.\nIf the argument is negative, the negation of the argument is returned.\nSpecial cases:\nIf the argument is positive zero or negative zero, the result\nis positive zero.\nIf the argument is infinite, the result is positive infinity.\nIf the argument is NaN, the result is NaN.\nIn other words, the result is the same as the value of the expression:\nDouble.longBitsToDouble((Double.doubleToLongBits(a)<<1)>>>1)"}, {"role": "assistant", "content": "double Math.absDouble (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "double"}, {"role": "assistant", "content": "double Math.random ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Computes the remainder operation on two arguments as prescribed\nby the IEEE 754 standard.\nThe remainder value is mathematically equal to\nf1 - f2 X n, \nwhere n is the mathematical integer closest to the exact\nmathematical value of the quotient f1/f2, and if two\nmathematical integers are equally close to f1/f2,\nthen n is the integer that is even. If the remainder is\nzero, its sign is the same as the sign of the first argument.\nSpecial cases:\nIf either argument is NaN, or the first argument is infinite,\nor the second argument is positive zero or negative zero, then the\nresult is NaN.\nIf the first argument is finite and the second argument is\ninfinite, then the result is the same as the first argument."}, {"role": "assistant", "content": "double Math.IEEEremainder (double f1, double f2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "long"}, {"role": "assistant", "content": "long Math.maxLong (long a, long b)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "double"}, {"role": "assistant", "content": "double Math.log (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the arc cosine of an angle, in the range of 0.0 through\npi.  Special case:\nIf the argument is NaN or its absolute value is greater\nthan 1, then the result is NaN.\nA result must be within 1 ulp of the correctly rounded result.  Results\nmust be semi-monotonic."}, {"role": "assistant", "content": "double Math.acos (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "double"}, {"role": "assistant", "content": "double Math.floor (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "double"}, {"role": "assistant", "content": "double Math.minDouble (double a, double b)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the absolute value of an int value.\nIf the argument is not negative, the argument is returned.\nIf the argument is negative, the negation of the argument is returned.\nNote that if the argument is equal to the value of\nInteger.MIN_VALUE, the most negative representable\nint value, the result is that same value, which is\nnegative."}, {"role": "assistant", "content": "int Math.absInt (int a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the trigonometric sine of an angle.  Special cases:\nIf the argument is NaN or an infinity, then the result is NaN.\nIf the argument is zero, then the result is a zero with the\nsame sign as the argument.\nA result must be within 1 ulp of the correctly rounded result.  Results\nmust be semi-monotonic."}, {"role": "assistant", "content": "double Math.sin (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the absolute value of a long value.\nIf the argument is not negative, the argument is returned.\nIf the argument is negative, the negation of the argument is returned.\nNote that if the argument is equal to the value of\nLong.MIN_VALUE, the most negative representable\nlong value, the result is that same value, which is\nnegative."}, {"role": "assistant", "content": "long Math.absLong (long a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the trigonometric tangent of an angle.  Special cases:\nIf the argument is NaN or an infinity, then the result is NaN.\nIf the argument is zero, then the result is a zero with the\nsame sign as the argument.\nA result must be within 1 ulp of the correctly rounded result.  Results\nmust be semi-monotonic."}, {"role": "assistant", "content": "double Math.tan (double a)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "long"}, {"role": "assistant", "content": "long Math.minLong (long a, long b)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an long holding the value extracted from the specified String when\nparsed with the radix given by the second argument. The first argument is\ninterpreted as representing a signed long in the radix specified by the\nsecond argument. The result is a long object that represents the long\nvalue specified by the string."}, {"role": "assistant", "content": "long Number.longValue (String s, int radix)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an int holding the value extracted from the specified String when\nparsed with the radix given by the second argument. The first argument is\ninterpreted as representing a signed integer in the radix specified by the\nsecond argument. The result is an Integer object that represents the integer\nvalue specified by the string."}, {"role": "assistant", "content": "int Number.valueOfString (String s, int radix)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Return the maximum value an int can have, 2^31-1."}, {"role": "assistant", "content": "int Number.MAX_VALUE ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Return a String containing the hexadecimal representation of the int passed."}, {"role": "assistant", "content": "String Number.toHexString (int i)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an double holding the value extracted from the specified String.\nThe first argument is interpreted as representing a signed double.\nThe result is a double that represents the double value specified by the string."}, {"role": "assistant", "content": "double Number.doubleValue (String s)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "f"}, {"role": "assistant", "content": "int Number.valueOfFloat (float f)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Return the minimum value an int can have, -2^31."}, {"role": "assistant", "content": "int Number.MIN_VALUE ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Return a String containing the octal representation of the int passed."}, {"role": "assistant", "content": "String Number.toOctalString (int i)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an int holding the value extracted from the specified String when\nparsed with the radix given by the second argument. The first argument is\ninterpreted as representing a signed integer in the radix specified by the\nsecond argument. The result is an Integer object that represents the integer\nvalue specified by the string."}, {"role": "assistant", "content": "int Number.intValue (String s, int radix)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Return a String containing the binary representation of the int passed."}, {"role": "assistant", "content": "String Number.toBinaryString (int i)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the value of the long passed in (\nl\n) as an int.\nThe high order bits are simply truncated which can result in sign reversal."}, {"role": "assistant", "content": "int Number.valueOfLong (long l)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an array of active destinations URI's that are bound to this RuleSession."}, {"role": "assistant", "content": "String[] Channel.getActiveDestinations()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Suspend a pre-existing destination."}, {"role": "assistant", "content": "void Channel.suspendDestination(String destinationURI) throws Exception"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an array of suspended destinations URI's that are bound to this rule session."}, {"role": "assistant", "content": "String[] Channel.getSuspendedDestinations()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an array of all active and suspended destinations URI's that are bound to this RuleSession."}, {"role": "assistant", "content": "String[] Channel.getAllDestinations()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Resume a pre-existing destination."}, {"role": "assistant", "content": "void Channel.resumeDestination(String destinationURI) throws Exception"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Return the remaining queue capacity for this local destination"}, {"role": "assistant", "content": "int Channel.getQueueCapacity(String destinationURI)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Stops an active channel based on the specified URI only if the channel is in started state."}, {"role": "assistant", "content": "boolean Channel.stopChannel(String channelURI)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get the queue depth for this local destination."}, {"role": "assistant", "content": "int Channel.getQueueDepth(String destinationURI)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Starts a channel to active mode based on the specified URI only if the channel is in stopped state."}, {"role": "assistant", "content": "boolean Channel.startChannel(String channelURI)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Return currentTime in milliseconds"}, {"role": "assistant", "content": "long System.currentTimeMillis()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the requested global variable's value as an int."}, {"role": "assistant", "content": "int System.getGlobalVariableAsInt (String propertyKey, int defaultValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "The current value of the system timer, in nanoseconds. This does not\nreflect the current time."}, {"role": "assistant", "content": "long System.nanoTime()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the requested global variable's value as a double."}, {"role": "assistant", "content": "double System.getGlobalVariableAsDouble (String propertyKey, double defaultValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the requested System property value as a long."}, {"role": "assistant", "content": "long System.getSystemPropertyAsLong (String propertyKey, long defaultValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the requested System property value as a boolean."}, {"role": "assistant", "content": "boolean System.getSystemPropertyAsBoolean (String propertyKey, boolean defaultValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Outputs the String passed to the USER sink."}, {"role": "assistant", "content": "void System.debugOut (String str)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Executes the specified Java method with the object instance and parameters."}, {"role": "assistant", "content": "Object System.execJava(String className, String method, String[] parameterTypes, Object object, Object[] parameters)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the requested System property value as a String."}, {"role": "assistant", "content": "String System.getSystemPropertyAsString (String propertyKey, String defaultValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the requested System property value as an double."}, {"role": "assistant", "content": "double System.getSystemPropertyAsDouble (String propertyKey, double defaultValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the requested global variable's value as a long."}, {"role": "assistant", "content": "long System.getGlobalVariableAsLong (String propertyKey, long defaultValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the requested System property value as an int."}, {"role": "assistant", "content": "int System.getSystemPropertyAsInt (String propertyKey, int defaultValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Executes the specified string command in a separate process. The command argument is parsed\ninto tokens and then executed as a command in a separate process."}, {"role": "assistant", "content": "void System.exec(String command)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the requested global variable's value as a String."}, {"role": "assistant", "content": "String System.getGlobalVariableAsString (String propertyKey, String defaultValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the requested global variable's value as a boolean."}, {"role": "assistant", "content": "boolean System.getGlobalVariableAsBoolean (String propertyKey, boolean defaultValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "fileName"}, {"role": "assistant", "content": "void System.IO.fileClose(String fileName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "str"}, {"role": "assistant", "content": "void System.IO.fileWrite (String fileName, String str, boolean append, boolean flush)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the sequence identified by the given name to the given value if the given value is greater than the current value."}, {"role": "assistant", "content": "void System.ID.reset(String name, long value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "For In Memory object management, it returns a system generated unique id for a given sequence name. It is only supported for in-memory objects, not cache-based."}, {"role": "assistant", "content": "long System.ID.nextId(String name)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes the sequence identified by the given name."}, {"role": "assistant", "content": "void System.ID.remove(String name)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns if the passed JsonNode is of Object type"}, {"role": "assistant", "content": "boolean JSON.isObjectNode(Object jsonNode)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Looks for and returns any value Json node associated to the field name under the given baseNode tree"}, {"role": "assistant", "content": "Object JSON.getValueNode(Object baseNode, String fieldName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the Map of keys to JsonNode"}, {"role": "assistant", "content": "Object JSON.getFields(Object jsonNode)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the type of JsonNode i.e. ARRAY/OBJECT/etc"}, {"role": "assistant", "content": "String JSON.getNodeType(Object jsonNode)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the JsonNode associated to the fieldName directly under the baseNode i.e. immediate children"}, {"role": "assistant", "content": "Object JSON.getNode(Object baseNode, String fieldName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the Iterator of all the nodes in the given JsonNode Object"}, {"role": "assistant", "content": "Object JSON.getAllElements(Object jsonNode)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the text value of the JSON node passed"}, {"role": "assistant", "content": "String JSON.getTextValue(Object jsonNode)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns if the field name exists in the given json base node"}, {"role": "assistant", "content": "boolean JSON.hasField(Object baseNode, String fieldName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns if the JsonNode is a value node or not"}, {"role": "assistant", "content": "boolean JSON.isValueNode(Object jsonNode)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Looks for and returns the parent node associated to the field name under the given baseNode tree"}, {"role": "assistant", "content": "Object JSON.findParent(Object baseNode, String fieldName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the Iterator of field names in a JsonNode"}, {"role": "assistant", "content": "Object JSON.getFieldNames(Object jsonNode)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Looks for and returns any Json node associated to the field name under the given baseNode tree"}, {"role": "assistant", "content": "Object JSON.findNode(Object baseNode, String fieldName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Parse the JSON content. If its a valid JSON, the API returns a parsed JsonNode Object, else throws a exception."}, {"role": "assistant", "content": "Object JSON.parseJSON(String jsonContent)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns if the Json node is an Array or not"}, {"role": "assistant", "content": "boolean JSON.isArrayNode(Object jsonNode)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get the request URI"}, {"role": "assistant", "content": "String HTTP.getRequestURI(SimpleEvent requestEvent)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Encodes a URL"}, {"role": "assistant", "content": "String HTTP.encodeURL(String url, String encoding)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sends a secure/non secure synchronous HTTP request. The event properties are converted to HTTP headers. The event payload is converted to POST data. Default behavior, if the event payload is null, HTTP GET will be used, else HTTP POST will be used. Alternatively, if HTTP.ConnectionInfo.setHttpMethod is set, then that method type will be used.This will return an event of type responseEventURI as a response encapsulating response headers as properties and post data if any as event payload."}, {"role": "assistant", "content": "Event HTTP.sendRequest(String url, SimpleEvent requestEvent, String responseEventURI, long timeoutMillis, Object httpConnectionInfo)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Loads and returns a KeyStore from the trusted certificates folder."}, {"role": "assistant", "content": "Object HTTP.loadTrustedCertificates(String trustedCertsFolder, String passwordToSet)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Encodes a String to Base64."}, {"role": "assistant", "content": "String HTTP.toBase64(String content)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sends an secure/non secure asynchronous HTTP request. The event payload is converted to POST data. Default behavior, if the event payload is null, HTTP GET will be used, else HTTP POST will be used. Alternatively, if HTTP.ConnectionInfo.setHttpMethod is set, then that method type will be used.The requesting thread continues processing. The response is handled asynchronously in the callback rule function. The signature of the success RuleFunction should be $1void ruleFunction (String correlationId, Event request, Event response$1) whereas that of the error RuleFunction should be $1void ruleFunction (String correlationId, Event request, Exception exception)$1 where the request event is the event that initiated the request, the response event is the HTTP response mapped to an Event and correlationId is the correlationId that was specified in the original request or that was returned by the sendAsynchronousRequest function."}, {"role": "assistant", "content": "String HTTP.sendAsynchronousRequest(String url, SimpleEvent requestEvent, String correlationId, String successCallbackRuleFunctionURL, String errorCallbackRuleFunctionURL, Object httpConnectionInfo)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates and returns a Keystore object using the given parameters."}, {"role": "assistant", "content": "Object HTTP.createKeystore(String ksFilePath, String ksType, String ksPassword)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Decodes a String from Base64."}, {"role": "assistant", "content": "String HTTP.fromBase64(String content, String encoding)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Decodes a URL."}, {"role": "assistant", "content": "String HTTP.decodeURL(String url, String encoding)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the payload of a SimpleEvent as a byte[] object that can be used as HTTP POST/PUT data."}, {"role": "assistant", "content": "Object HTTP.getPayloadData(SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns if the underlying websocket endpoint connection is open"}, {"role": "assistant", "content": "boolean HTTP.WebSocket.isConnectionOpen(Object eventOrSessionContext)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the underlying websocket session context"}, {"role": "assistant", "content": "Object HTTP.WebSocket.getSessionContext(SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sends message to current session or broadcasts to all sessions associated to the underlying websocket endpoint"}, {"role": "assistant", "content": "void HTTP.WebSocket.sendMessage(Object eventOrSessionContext, Object message, boolean broadcast)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the query string"}, {"role": "assistant", "content": "String HTTP.WebSocket.getQueryString(Object eventOrSessionContext)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a map of the request parameters"}, {"role": "assistant", "content": "Object HTTP.WebSocket.getRequestParameters(Object eventOrSessionContext)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Closes single/all websocket connection/s to the underlying endpoint"}, {"role": "assistant", "content": "void HTTP.WebSocket.closeConnection(Object eventOrSessionContext, int closeCode, String closeReason, boolean all)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get servlet request from the context object."}, {"role": "assistant", "content": "Object HTTP.Servlet.getServletRequest(Object context)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get servlet response from the context object."}, {"role": "assistant", "content": "Object HTTP.Servlet.getServletResponse(Object context)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Responds by redirecting the client to a different URL."}, {"role": "assistant", "content": "void HTTP.Servlet.Response.sendRedirectTo(Object context, String redirectURL)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Adds a cookie object to the response."}, {"role": "assistant", "content": "void HTTP.Servlet.Response.setCookie(Object response, Object cookie)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the status code in the servlet response."}, {"role": "assistant", "content": "void HTTP.Servlet.Response.setResponseStatusCode(Object context, int statusCode)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets a response header."}, {"role": "assistant", "content": "void HTTP.Servlet.Response.setResponseHeader(Object response, String headerName, String headerValue)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the String or byte[] response content in the servlet response, and sends the response."}, {"role": "assistant", "content": "void HTTP.Servlet.Response.setResponseContent(Object context, Object content, boolean commitResponse)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a cookie object to be set on the response."}, {"role": "assistant", "content": "Object HTTP.Servlet.Response.getCookie(String cookieName, String cookieValue, String domain, String path, int expiry)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get Http Session Id"}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getSessionId(Object session)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get servlet request URI."}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getRequestURI(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the port number."}, {"role": "assistant", "content": "int HTTP.Servlet.Request.getServerPort(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Starts asynchronous processing of servlet requests."}, {"role": "assistant", "content": "Object HTTP.Servlet.Request.startAsync(Object servletRequest)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get Http Session attribute"}, {"role": "assistant", "content": "Object HTTP.Servlet.Request.getSessionAttribute(Object session, String key)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Invalidate Http sesion"}, {"role": "assistant", "content": "void HTTP.Servlet.Request.invalidateSession(Object session)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the servlet request post data."}, {"role": "assistant", "content": "byte[] HTTP.Servlet.Request.getRequestContent(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get Http Session attribute names"}, {"role": "assistant", "content": "String[] HTTP.Servlet.Request.getSessionAttributeNames(Object session)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Set Http Session timeout"}, {"role": "assistant", "content": "void HTTP.Servlet.Request.setSessionTimeout(Object session, int timeout)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get Http Session"}, {"role": "assistant", "content": "Object HTTP.Servlet.Request.getSession(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets a servlet request header value."}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getRequestHeader(Object request, String headerName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Set Http Session timeout"}, {"role": "assistant", "content": "void HTTP.Servlet.Request.setSessionAttribute(Object session, String key, Object value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the address of the remote requestor."}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getRequestorAddress(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the servlet request method."}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getMethod(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the complete Multipart Content as a Map."}, {"role": "assistant", "content": "Object HTTP.Servlet.Request.getMultipartContent(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the protocol name used in the request."}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getServerScheme(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the browser name from where the request is generated."}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getRequestBrowserName(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the cookie value for the given cookie name"}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getCookieValue(Object[] allCookies, String cookieName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Remove Http Session attribute"}, {"role": "assistant", "content": "void HTTP.Servlet.Request.removeSessionAttribute(Object session, String key)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get servlet request header names."}, {"role": "assistant", "content": "Object HTTP.Servlet.Request.getRequestHeaders(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the server name used in the request."}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getServerName(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the names of all the servlet request parameters."}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getRequestParameters(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the values of all the servlet request parameters."}, {"role": "assistant", "content": "String[] HTTP.Servlet.Request.getRequestParameterValues(Object request, String paramName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get servlet request cookies"}, {"role": "assistant", "content": "Object[] HTTP.Servlet.Request.getRequestCookies(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the specified part of a Multipart content."}, {"role": "assistant", "content": "Object HTTP.Servlet.Request.getPartContent(Object multipartContent, String partName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the protocol used by the servlet request."}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getProtocol(Object request)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets a servlet request parameter value."}, {"role": "assistant", "content": "String HTTP.Servlet.Request.getRequestParameter(Object request, String paramName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Update HTTPConnectionInfo Object with secure/SSL usage details."}, {"role": "assistant", "content": "Object HTTP.ConnectionInfo.setSecureInfo(Object connectionInfo, String sslProtocol, Object clientIdKeyStore, String clientIdPassword, Object trustedCertsKeystore, String trustedCertsPassword)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a HTTPConnectionInfo object."}, {"role": "assistant", "content": "Object HTTP.ConnectionInfo.createHTTPConnectionInfo(boolean isSecure)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Update HTTPConnectionInfo Object with proxy details."}, {"role": "assistant", "content": "Object HTTP.ConnectionInfo.setProxy(Object connectionInfo, String proxyHost, int proxyPort)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Configures HTTP Connection to use specified HTTP method during invocation."}, {"role": "assistant", "content": "void HTTP.ConnectionInfo.setHttpMethod(Object connectionInfo, String httpMethod)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Configure HTTP Connection to enable/disable Expect-Continue Header."}, {"role": "assistant", "content": "Object HTTP.ConnectionInfo.disableExpectContinueHeader(Object connectionInfo, boolean expectContinueHeaderDisabled)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Configures HTTP Connection to enable/disable cookies. Disable will ignore cookies both ways i.e. accepting from the server or sending back to the server."}, {"role": "assistant", "content": "void HTTP.ConnectionInfo.disableCookie(Object connectionInfo, boolean disableCookie)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This function returns a concept instance using the event's payload. Returned\ninstance is not asserted to WM"}, {"role": "assistant", "content": "Concept Instance.createTransientInstanceFromEvent (String uri, SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Start a Concept instance's main state machine, and optionally, the main state machines of its contained concepts."}, {"role": "assistant", "content": "void Instance.startStateMachine(Concept instance, boolean startChildren)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "id"}, {"role": "assistant", "content": "Concept Instance.getById (Object Id)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "uri"}, {"role": "assistant", "content": "Concept Instance.createTransientInstanceFromXML (String uri, String xml)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "uri"}, {"role": "assistant", "content": "Concept Instance.createInstanceFromXML (String uri, String xml)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "instance"}, {"role": "assistant", "content": "String Instance.getExpandedName (Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "instance"}, {"role": "assistant", "content": "Concept Instance.getStateMachineOwner (Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "extId"}, {"role": "assistant", "content": "Concept Instance.getByExtIdByURI (String extId, String uri)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Update a Concept instance with data contained in an XML serialization of concept data.\nThe Concept instance to be updated is identified by an extId attribute in the serialized concept data.\nAn Exception will be thrown if the extId provided does not match any existing Concept instance."}, {"role": "assistant", "content": "Concept Instance.updateInstanceFromXML (String xml)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "instance"}, {"role": "assistant", "content": "Concept Instance.deleteInstance (Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Serializes a Concept instance into an JSON string."}, {"role": "assistant", "content": "String Instance.serializeToJSON (Concept instance, boolean pretty, String root)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Update a Concept instance with data contained in an JSON serialization of concept data.\nThe Concept instance to be updated is identified by an extId attribute in the serialized concept data.\nAn Exception will be thrown if the extId provided does not match any existing Concept instance."}, {"role": "assistant", "content": "Concept Instance.updateInstanceFromJSON (String uri, String json)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "serialize()"}, {"role": "assistant", "content": "Concept Instance.createInstanceFromJSON (String uri, String json)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "instance"}, {"role": "assistant", "content": "boolean Instance.isModified (Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "instance"}, {"role": "assistant", "content": "Object[] Instance.getReverseReferences(Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Checks if a concept is a state machine.  Concepts that have state machines are state machine owners but are not state machines themselves."}, {"role": "assistant", "content": "boolean Instance.isStateMachine (Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "instance"}, {"role": "assistant", "content": "boolean Instance.isNew (Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Serializes a Concept instance into an XML String with the default namespace URI for concepts,\nand with the inclusion of properties controlled by a regex filter"}, {"role": "assistant", "content": "String Instance.filterAndSerializeUsingDefaults (Concept instance, String propertyNameRegexFilter)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Updates a Concept instance based on the data provided in the XSLT \nMapper. Modifying the instance in the working memory will\ncause any rule conditions that depend on the concept to be evaluated."}, {"role": "assistant", "content": "void Instance.updateInstance (String xslt-template)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "serialize()"}, {"role": "assistant", "content": "Concept Instance.createTransientInstanceFromJSON (String uri, String json)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Serializes a Concept instance into an XML string using the default namespace URI for Concepts."}, {"role": "assistant", "content": "String Instance.serializeUsingDefaults (Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Serializes a Concept instance into an XML string."}, {"role": "assistant", "content": "String Instance.serialize (Concept instance, boolean changedOnly, String nameSpace, String root)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "uri"}, {"role": "assistant", "content": "Concept Instance.newInstance (String uri, String extId)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "uri"}, {"role": "assistant", "content": "Concept Instance.newTransientInstance (String uri)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a new Concept instance based on the data provided in the XSLT \nMapper and adds it to the working memory. Adding the instance to the working memory will\ncause any rule conditions that depend on the concept to be evaluated."}, {"role": "assistant", "content": "Concept Instance.createInstance (String xslt-template)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "value"}, {"role": "assistant", "content": "boolean Instance.PropertyArray.removeDateTime (PropertyArrayDateTime arr, DateTime value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a Concept[] containing all of the instances in a PropertyArrayConcept in the correct order"}, {"role": "assistant", "content": "Concept[] Instance.PropertyArray.toArrayConcept(PropertyArrayConcept arr)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a long[] containing all of the values in a PropertyArray in the correct order"}, {"role": "assistant", "content": "long[] Instance.PropertyArray.toArrayLong(PropertyArray arr)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the index in the PropertyArrayString of the first occurrence of the specified String value,\nor -1 if the PropertyArrayString does not contain this String value."}, {"role": "assistant", "content": "int Instance.PropertyArray.indexOfString(PropertyArrayString arr, String value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "value"}, {"role": "assistant", "content": "boolean Instance.PropertyArray.removeLong (PropertyArrayLong arr, long value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a boolean[] containing all of the boolean values in a PropertyArrayBoolean in the correct order"}, {"role": "assistant", "content": "boolean[] Instance.PropertyArray.toArrayBoolean(PropertyArrayBoolean arr)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "instance"}, {"role": "assistant", "content": "boolean Instance.PropertyArray.removeConceptReference (PropertyArrayConceptReference arr, Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a new propertyAtomInt of value with initial history timestamp time and appends to the end of the\nPropertyArray. Use instanceX.arr[instanceX.arr@length] = value for appending with system current time"}, {"role": "assistant", "content": "void Instance.PropertyArray.appendInt (PropertyArrayInt arr, int value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a int[] containing all of the values in a PropertyArray in the correct order"}, {"role": "assistant", "content": "int[] Instance.PropertyArray.toArrayInt(PropertyArray arr)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a new propertyAtomLong of value with initial history timestamp time and appends to the end of the\nPropertyArray. Use instanceX.arr[instanceX.arr@length] = value for appending with system current time"}, {"role": "assistant", "content": "void Instance.PropertyArray.appendLong (PropertyArrayLong arr, long value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the index in the PropertyArrayConceptReference of the first occurrence of the specified Concept instance,\nor -1 if the PropertyArrayConceptReference does not contain this Concept instance."}, {"role": "assistant", "content": "int Instance.PropertyArray.indexOfConceptReference(PropertyArrayConceptReference arr, Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "PropertyAtomContainedConcept"}, {"role": "assistant", "content": "void Instance.PropertyArray.appendContainedConcept (PropertyArrayContainedConcept arr, ContainedConcept instance, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a String[] containing all of the values in a PropertyArray in the correct order"}, {"role": "assistant", "content": "String[] Instance.PropertyArray.toArrayString(PropertyArray arr)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "value"}, {"role": "assistant", "content": "boolean Instance.PropertyArray.removeDouble (PropertyArrayDouble arr, double value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a new propertyAtomBoolean of value with initial history timestamp time and appends to the end of the\nPropertyArray. Use instanceX.arr[instanceX.arr@length] = value for appending with system current time."}, {"role": "assistant", "content": "void Instance.PropertyArray.appendBoolean (PropertyArrayBoolean arr, boolean value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a new propertyAtomDouble of value with initial history timestamp time and appends to the end of the\nPropertyArray. Use instanceX.arr[instanceX.arr@length] = value for appending with system current time"}, {"role": "assistant", "content": "void Instance.PropertyArray.appendDouble (PropertyArrayDouble arr, double value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a double[] containing all of the values in a PropertyArray in the correct order"}, {"role": "assistant", "content": "double[] Instance.PropertyArray.toArrayDouble(PropertyArray arr)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "value"}, {"role": "assistant", "content": "boolean Instance.PropertyArray.removeString (PropertyArrayString arr, String value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a new propertyAtomString of value with initial history timestamp time and appends to the end of the\nPropertyArray. Use instanceX.arr[instanceX.arr@length] = value for appending with system current time"}, {"role": "assistant", "content": "void Instance.PropertyArray.appendString (PropertyArrayString arr, String value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the index in the PropertyArrayBoolean of the first occurrence of the specified boolean value,\nor -1 if the PropertyArrayBoolean does not contain this boolean value."}, {"role": "assistant", "content": "int Instance.PropertyArray.indexOfBoolean(PropertyArrayBoolean arr, boolean value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "value"}, {"role": "assistant", "content": "boolean Instance.PropertyArray.removeBoolean (PropertyArrayBoolean arr, boolean value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates a new propertyAtomDateTime of value with initial history timestamp time and appends to the end of the\nPropertyArray. Use instanceX.arr[instanceX.arr@length] = value for appending with system current time"}, {"role": "assistant", "content": "void Instance.PropertyArray.appendDateTime (PropertyArrayDateTime arr, DateTime value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "instance"}, {"role": "assistant", "content": "boolean Instance.PropertyArray.removeContainedConcept (PropertyArrayContainedConcept arr, ContainedConcept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "arr"}, {"role": "assistant", "content": "void Instance.PropertyArray.clear (PropertyArray arr)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the index in the PropertyArrayDateTime of the first occurrence of the specified DateTime value,\nor -1 if the PropertyArrayDateTime does not contain this DateTime value."}, {"role": "assistant", "content": "int Instance.PropertyArray.indexOfDateTime(PropertyArrayDateTime arr, DateTime value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a DateTime[] containing all of the DateTime values in a PropertyArrayDateTime in the correct order"}, {"role": "assistant", "content": "DateTime[] Instance.PropertyArray.toArrayDateTime(PropertyArrayDateTime arr)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "PropertyAtomConceptReference"}, {"role": "assistant", "content": "void Instance.PropertyArray.appendConceptReference (PropertyArrayConceptReference arr, Concept instance, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the index in the PropertyArrayContainedConcept of the first occurrence of the specified ContainedConcept instance,\nor -1 if the PropertyArrayContainedConcept does not contain this ContainedConcept instance."}, {"role": "assistant", "content": "int Instance.PropertyArray.indexOfContainedConcept(PropertyArrayContainedConcept arr, ContainedConcept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "value"}, {"role": "assistant", "content": "boolean Instance.PropertyArray.removeInt (PropertyArrayInt arr, int value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "arr"}, {"role": "assistant", "content": "void Instance.PropertyArray.delete (PropertyArray arr, int index)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the index in the PropertyArrayInt of the first occurrence of the specified int value,\nor -1 if the PropertyArrayInt does not contain this int value."}, {"role": "assistant", "content": "int Instance.PropertyArray.indexOfInt(PropertyArrayInt arr, int value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a ContainedConcept[] containing all of the instances in a PropertyArrayContainedConcept in the correct order"}, {"role": "assistant", "content": "ContainedConcept[] Instance.PropertyArray.toArrayContainedConcept(PropertyArrayContainedConcept arr)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the index in the PropertyArrayLong of the first occurrence of the specified long value,\nor -1 if the PropertyArrayLong does not contain this long value."}, {"role": "assistant", "content": "int Instance.PropertyArray.indexOfLong(PropertyArrayLong arr, long value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the index in the PropertyArrayDouble of the first occurrence of the specified double value,\nor -1 if the PropertyArrayDouble does not contain this double value."}, {"role": "assistant", "content": "int Instance.PropertyArray.indexOfDouble(PropertyArrayDouble arr, double value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an array of the current states (if any). The state machine could\nconcurrently be in many states so all the active states names are returned. The state name returned\nis the name defined at design time without the path. If the state machine is in a sub-state of the\ncomposite state then both the composite state as well as the sub-state are returned."}, {"role": "assistant", "content": "String[] Instance.StateMachine.getCurrentStateNames(Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an array of the full paths of current states (if any). The state machine could be\nconcurrently in many states so all the active state paths are returned.\nThe returned paths are the runtime paths which could be different from their design time equivalents.\nThe state name is nested; e.g., A$B implies B as a sub-state within A."}, {"role": "assistant", "content": "String[] Instance.StateMachine.getCurrentStatePaths(Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyInt object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyInt(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyString object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyString(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyArray object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyArray(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns all property names of a Concept Instance."}, {"role": "assistant", "content": "String[] Instance.Reflection.getAllPropertyNames(Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyConcept object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyConcept(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyContainedConcept object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyContainedConcept(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Given the concept instance and property name, set the value of a PropertyArray at index to the value passed."}, {"role": "assistant", "content": "boolean Instance.Reflection.setPropertyArrayValue(Concept instance, String name, int index, Object value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the length of a PropertyArray given the Concept instance and the property name.\nIt returns -1 if the length can't be determined. e.g. no such propertyArray exception"}, {"role": "assistant", "content": "int Instance.Reflection.getPropertyArrayLength(Concept instance, String name)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyBoolean object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyBoolean(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Given the concept instance and property name, get the value of a PropertyArray at the index passed."}, {"role": "assistant", "content": "Object Instance.Reflection.getPropertyArrayValue(Concept instance, String name, int index)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a Property object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isProperty(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns a property of a Concept Instance given the property name."}, {"role": "assistant", "content": "Object Instance.Reflection.getProperty(Concept instance, String propertyName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyLong object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyLong(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns all properties of a Concept Instance."}, {"role": "assistant", "content": "Object[] Instance.Reflection.getAllProperties(Concept instance)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyDateTime object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyDateTime(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyConceptReference object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyConceptReference(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method explicitly casts the property to an object. It returns the property object, not the value in the property."}, {"role": "assistant", "content": "Object Instance.Reflection.toObject(Property pa)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Given the concept instance and property name, set the value of a PropertyAtom to the value passed."}, {"role": "assistant", "content": "boolean Instance.Reflection.setPropertyAtomValue(Concept instance, String name, Object value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyAtom object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyAtom(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method checks if an object is a PropertyDouble object."}, {"role": "assistant", "content": "boolean Instance.Reflection.isPropertyDouble(Object obj)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the value of the PropertyAtom to the value passed."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.setPropertyValue (PropertyAtom pa, Object value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomBoolean passed, at the specified index in the ring buffer.\noldest value is at index 0."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.getBooleanHistoryValue (PropertyAtomBoolean propertyAtomBoolean, int idx)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtom passed, at the specified index in the ring buffer.\noldest value is at index 0."}, {"role": "assistant", "content": "Object Instance.PropertyAtom.getHistoryValue(PropertyAtom propertyAtom, int idx)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomLong passed, at the time stamp specified."}, {"role": "assistant", "content": "long Instance.PropertyAtom.getLong (PropertyAtomLong propertyAtomLong, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomDateTime passed, at the specified index in the ring buffer.\nOldest value is at index 0."}, {"role": "assistant", "content": "DateTime Instance.PropertyAtom.getDateTimeHistoryValue (PropertyAtomDateTime propertyAtomDateTime, int idx)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomDouble passed, at the time stamp specified."}, {"role": "assistant", "content": "double Instance.PropertyAtom.getDouble (PropertyAtomDouble propertyAtomDouble, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the current value of a PropertyAtom."}, {"role": "assistant", "content": "Object Instance.PropertyAtom.getPropertyValue(PropertyAtom propertyAtom)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomInt passed, at the time stamp specified."}, {"role": "assistant", "content": "int Instance.PropertyAtom.getInt (PropertyAtomInt propertyAtomInt, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "propertyAtomLong"}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.setLong (PropertyAtomLong pal, long value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomContainedConcept at a particular time."}, {"role": "assistant", "content": "Concept Instance.PropertyAtom.getContainedConcept (PropertyAtomContainedConcept pacc, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the value of the PropertyAtom to the value passed with the time stamp specified."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.setConceptReference (PropertyAtomConceptReference parc, Concept value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomDouble passed, at the specified index in the ring buffer.\nOldest value is at index 0."}, {"role": "assistant", "content": "double Instance.PropertyAtom.getDoubleHistoryValue (PropertyAtomDouble propertyAtomDouble, int idx)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomDateTime passed, at the time stamp specified."}, {"role": "assistant", "content": "DateTime Instance.PropertyAtom.getDateTime (PropertyAtomDateTime propertyAtomDateTime, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the value of the PropertyAtom to the value passed with the time stamp specified."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.setDouble (PropertyAtomDouble pad, double value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtom passed, at the time stamp specified."}, {"role": "assistant", "content": "Object Instance.PropertyAtom.getValueAt(PropertyAtom propertyAtom, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the value of the PropertyAtom to the value passed with the time stamp specified."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.setInt (PropertyAtomInt pai, int value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomBoolean passed, at the time stamp specified."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.getBoolean (PropertyAtomBoolean propertyAtomBoolean, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the value of the PropertyAtom to the value passed with the time stamp specified."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.setValueAt (PropertyAtom pa, Object value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns how many history values exist for given property.\nThe value is bounded by history size."}, {"role": "assistant", "content": "int Instance.PropertyAtom.numHistoryValues(PropertyAtom pa)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the value of the PropertyAtom to the value passed with the time stamp specified."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.setBoolean (PropertyAtomBoolean pab, boolean value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomContainedConcept at a specified index in the ring buffer.\nOldest value is at index 0."}, {"role": "assistant", "content": "Concept Instance.PropertyAtom.getContainedConceptHistoryValue (PropertyAtomContainedConcept pacc, int idx)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the value of the PropertyAtom to the value passed with the time stamp specified."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.setString (PropertyAtomString pas, String value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomConceptReference at a given specified index in the ring buffer.\nOldest value is at index 0"}, {"role": "assistant", "content": "Concept Instance.PropertyAtom.getConceptReferenceHistoryValue (PropertyAtomConceptReference parc, int idx)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the value of the PropertyAtom to the value passed with the time stamp specified."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.setDateTime (PropertyAtomDateTime padt, DateTime value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomInt passed, at the specified index in the ring buffer.\nOldest value is at index 0."}, {"role": "assistant", "content": "int Instance.PropertyAtom.getIntHistoryValue (PropertyAtomInt propertyAtomInt, int idx)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This method returns the size of the history buffer as specified in the design environment."}, {"role": "assistant", "content": "int Instance.PropertyAtom.historySize(PropertyAtom pa)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomString passed, at the specified index in the ring buffer.\nOldest value is at index 0."}, {"role": "assistant", "content": "String Instance.PropertyAtom.getStringHistoryValue (PropertyAtomString propertyAtomString, int idx)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomString passed, at the time stamp specified."}, {"role": "assistant", "content": "String Instance.PropertyAtom.getString (PropertyAtomString propertyAtomString, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get the history timestamp of this PropertyAtom value for a given index. Returns 0 if the index has not yet been used."}, {"role": "assistant", "content": "long Instance.PropertyAtom.getHistoryTime(PropertyAtom propertyAtom, int idx)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomConceptReference at a particular time."}, {"role": "assistant", "content": "Concept Instance.PropertyAtom.getConceptReference (PropertyAtomConceptReference parc, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the value of the PropertyAtomLong passed, at the specified index in the ring buffer.\nOldest value is at index 0."}, {"role": "assistant", "content": "long Instance.PropertyAtom.getLongHistoryValue (PropertyAtomLong propertyAtomLong, int idx)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the value of the PropertyAtom to the value passed with the time stamp specified."}, {"role": "assistant", "content": "boolean Instance.PropertyAtom.setContainedConcept (PropertyAtomContainedConcept pacc, ContainedConcept value, long time)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Invoke all implementations of a virtual rule function."}, {"role": "assistant", "content": "Object VRF.invokeAllVRFImpls (String vrfURI, Object[] args)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get all the available implementations of a virtual rule function."}, {"role": "assistant", "content": "Object[] VRF.getVRFImpls (String vrfURI)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Invoke a virtual rule function implementation by name."}, {"role": "assistant", "content": "int[] VRF.invokeVRFImplByName (String vrfURI, String implName, Object[] args)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Invoke an array of virtual rule function implementations."}, {"role": "assistant", "content": "Object VRF.invokeVRFImpls (Object[] vrfImpls, Object[] args, Object[] returnValues)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get the names of all available implementations of a virtual rule function."}, {"role": "assistant", "content": "String[] VRF.getVRFImplNames (String vrfURI)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Invoke a virtual rule function implementation."}, {"role": "assistant", "content": "int[] VRF.invokeVRFImpl (Object vrfImpl, Object[] args)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get an implementation of a virtual rule function."}, {"role": "assistant", "content": "Object VRF.getVRFImplByName (String vrfURI, String implName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Logs a message with an exception."}, {"role": "assistant", "content": "void Log.logException(Object logger, String level, String message, BEException thrown, Object... arguments)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Change the level."}, {"role": "assistant", "content": "void Log.setLevel(Object oLogger, String logLevel)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Change the level."}, {"role": "assistant", "content": "void Log.setLevelByName(String loggerNamePattern, String logLevel)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Logs a message."}, {"role": "assistant", "content": "void Log.log(Object logger, String logLevel, String message, Object... arguments)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get the log level."}, {"role": "assistant", "content": "String Log.getLevel(Object oLogger)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get a logger to be used inside a rule/rulefunction name."}, {"role": "assistant", "content": "Object Log.getLogger(String loggerName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Get the name of logger."}, {"role": "assistant", "content": "String Log.getName(Object oLogger)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Decodes a base64 encoded string into a byte array."}, {"role": "assistant", "content": "Object Binary.Base64.decode(String base64String)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Encodes a byte array into Base64 notation."}, {"role": "assistant", "content": "String Binary.Base64.encode(Object bytes)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Converts all of the characters in the String passed to upper case\nusing the rules of the default locale."}, {"role": "assistant", "content": "String String.toUpperCase (String s1)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "s1"}, {"role": "assistant", "content": "boolean String.contains (String s1, String s2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the message string formatted with arguments. Arguments are substituted in the order\nthe patterns are found."}, {"role": "assistant", "content": "String String.format(String message, Object... arguments)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "s2"}, {"role": "assistant", "content": "int String.lastIndexOfString (String s1, int fromIndex, String s2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "s2"}, {"role": "assistant", "content": "int String.indexOfString (String s1, int fromIndex, String s2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "s1"}, {"role": "assistant", "content": "int String.compareTo (String s1, String s2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "s1"}, {"role": "assistant", "content": "String String.substringBefore (String s1, String s2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Tests if two identified string regions are equal."}, {"role": "assistant", "content": "boolean String.regionMatches (boolean ignoreCase, String s1, int offset1, String s2, int offset2, int length)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "s1"}, {"role": "assistant", "content": "boolean String.endsWith (String s1, String suffix)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Tells whether or not this string matches the given regular expression.\nTo see a description of the regular expression syntax see the\njava.util.regex.Pattern documentation."}, {"role": "assistant", "content": "boolean String.matches (String s1, String regex)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Splits this string around matches of the given regular expression.\nTrailing empty strings are not included in the resulting array."}, {"role": "assistant", "content": "String[] String.split(String str, String regex)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Breaks an input string into tokens, returning a string tokens in a String[].\nThe whole delimiters input string is not a single $1delimiter$1."}, {"role": "assistant", "content": "String[] String.tokenize(String str, String delimiter)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "length"}, {"role": "assistant", "content": "String String.right (String s1, int length)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a hash code for the passed String."}, {"role": "assistant", "content": "int String.hashCode (String s1)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Convert specified string to bytes"}, {"role": "assistant", "content": "Object String.getBytes(String s1, String charsetName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Converts all of the characters in the String passed to lower case\nusing the rules of the default locale."}, {"role": "assistant", "content": "String String.toLowerCase (String s1)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Splits this string around matches of the given regular expression.\nThe limit parameter controls the number of times the pattern is applied and therefore\naffects the length of the resulting array."}, {"role": "assistant", "content": "String[] String.split2(String str, String regex, int limit)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Appends the specified string to the character sequence.\nThe characters of the String argument are appended, in order, increasing the length of this sequence by the length of the argument.\nIf the string argument is\n, then the four characters\nare appended.\nLet n be the length of the character sequence prior to execution of the append method.Then the character at the index k in the new character sequence is equal to the character at the index k in the old character sequence, if k is less than n. If k is greater than n then the character at index k is equal to the character at index k-n in the argument string."}, {"role": "assistant", "content": "Object String.append(Object stringBuffer, String stringToAppend)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Replaces the first substring of this string that matches the\ngiven regular expression with the given replacement."}, {"role": "assistant", "content": "String String.replaceFirst (String s1, String regex, String replacement)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the length (number of characters) of the String passed in."}, {"role": "assistant", "content": "int String.length (String s1)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a new string resulting from replacing all occurrences of oldChar\nin this string with newChar.  If the character oldChar does not occur\nin the character sequence represented by this String object, then a\nreference to this String object is returned. Otherwise, a new String\nobject is created that represents a character sequence identical to the\ncharacter sequence represented by this String object, except that every\noccurrence of oldChar is replaced by an occurrence of newChar."}, {"role": "assistant", "content": "String String.replace (String s1, char oldChar, char newChar)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a string front-padded to the indicated length with the pad character."}, {"role": "assistant", "content": "String String.padFront(String s1, int length, String padCharacter)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a copy of the string, with leading and trailing whitespace omitted."}, {"role": "assistant", "content": "String String.trim(String str)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a String representation of the float passed in."}, {"role": "assistant", "content": "String String.valueOfFloat (float f)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Replaces each substring of this string that matches the given\nregular expression with the given replacement."}, {"role": "assistant", "content": "String String.replaceAll (String s1, String regex, String replacement)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Convert byte array to string"}, {"role": "assistant", "content": "String String.convertByteArrayToString(Object bytesObject, String encoding)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Compares two strings lexicographically, ignoring case differences.\nThis method returns an integer whose sign is that of calling compareTo\nwith normalized versions of the strings where case differences have been\neliminated by lowercasing each character.\nNote that this method does not take locale into account, and will result\nin an unsatisfactory ordering for certain locales."}, {"role": "assistant", "content": "int String.compareToIgnoreCase (String s1, String s2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "length"}, {"role": "assistant", "content": "String String.left (String s1, int length)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a String representation of the int passed in."}, {"role": "assistant", "content": "String String.valueOfInt (int i)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Compares two Strings and returns a boolean indicating whether they are equal."}, {"role": "assistant", "content": "boolean String.equals (String s1, String s2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a String representation of the boolean passed in."}, {"role": "assistant", "content": "String String.valueOfBoolean (boolean b)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "The new buffer is created using the Java StringBuilder class."}, {"role": "assistant", "content": "Object String.createBuffer(int size)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns string content of a buffer"}, {"role": "assistant", "content": "String String.convertBufferToString(Object stringBuffer)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a string padded to the indicated length with the pad character."}, {"role": "assistant", "content": "String String.pad (String s1, int length, String padCharacter)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "s1"}, {"role": "assistant", "content": "boolean String.startsWith (String s1, String prefix)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Concatenates the two argument strings and returns the resulting String."}, {"role": "assistant", "content": "String String.concat (String s1, String s2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "endIndex - 1"}, {"role": "assistant", "content": "String String.substring (String s1, int beginIndex, int endIndex)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a String representation of the double passed in."}, {"role": "assistant", "content": "String String.valueOfDouble (double d)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "s1"}, {"role": "assistant", "content": "String String.substringAfter (String s1, String s2)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a String representation of the long passed in."}, {"role": "assistant", "content": "String String.valueOfLong (long l)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "The method clearBuffer uses the Java StringBuilder delete method."}, {"role": "assistant", "content": "void String.clearBuffer(Object stringBuffer)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns true if this collection contains the specified element."}, {"role": "assistant", "content": "boolean Collections.contains ( Object collection, Object element )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the number of elements in this collection."}, {"role": "assistant", "content": "int Collections.size ( Object collection )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns true if this collection contains all of the elements of the specified collection."}, {"role": "assistant", "content": "boolean Collections.containsAll ( Object collection, Object collection2 )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an array containing all of the elements in this collection in proper \n sequence (from first to last element)"}, {"role": "assistant", "content": "Object[] Collections.toArray ( Object collection, Object ... a )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Inserts the specified element at the specified position in this collection."}, {"role": "assistant", "content": "void Collections.add ( Object collection, Object element)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Retains only the elements in this collection that are contained in the specified collection."}, {"role": "assistant", "content": "boolean Collections.retainAll ( Object collection, Object collection2 )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes the first occurrence of the specified element from this collection, if it is present.."}, {"role": "assistant", "content": "boolean Collections.remove ( Object collection, Object element )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an iterator over the elements in this collection in proper sequence."}, {"role": "assistant", "content": "Object Collections.iterator ( Object collection )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes from this collection all of its elements that are contained in the specified collection."}, {"role": "assistant", "content": "boolean Collections.removeAll ( Object collection, Object collection2 )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes all of the elements from this collection."}, {"role": "assistant", "content": "void Collections.clear ( Object collection )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Inserts all of the elements in the specified collection into this collection at the specified position."}, {"role": "assistant", "content": "boolean Collections.addAll ( Object collection, Object collection2 )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Compares its two arguments for order."}, {"role": "assistant", "content": "int Collections.Comparator.compare ( Object comparator, Object o1, Object o2   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates instance of user specified Comparator implementation."}, {"role": "assistant", "content": "Object Collections.Comparator.createSet ( String className   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the portion of this map whose keys are strictly less than toKey."}, {"role": "assistant", "content": "Object Collections.SortedMap.headMap ( Object map, Object toKey   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey."}, {"role": "assistant", "content": "Object Collections.SortedMap.tailMap ( Object map, Object fromKey   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the last (highest) key currently in this map."}, {"role": "assistant", "content": "Object Collections.SortedMap.lastKey (Object map  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.)"}, {"role": "assistant", "content": "Object Collections.SortedMap.subMap ( Object map, Object fromKey  ,Object toKey   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the first (lowest) key currently in this map."}, {"role": "assistant", "content": "Object Collections.SortedMap.firstKey ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the comparator used to order the keys in this map, or null if this map uses the Comparable natural ordering of its keys."}, {"role": "assistant", "content": "Object Collections.SortedMap.comparator ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the last (highest) element currently in this set."}, {"role": "assistant", "content": "Object Collections.SortedSet.last ( Object set )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive. (If fromElement and toElement are equal, the returned set is empty.)"}, {"role": "assistant", "content": "Object Collections.SortedSet.subSet ( Object set, Object fromElement  ,Object toElement   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the portion of this set whose elements are greater than or equal to fromElement."}, {"role": "assistant", "content": "Object Collections.SortedSet.tailSet ( Object set, Object fromElement   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the portion of this set whose elements are strictly less than toElement."}, {"role": "assistant", "content": "Object Collections.SortedSet.headSet ( Object set, Object toElement   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the comparator used to sort the keys in the set, or null if natural ordering is used."}, {"role": "assistant", "content": "Object Collections.SortedSet.comparator ( Object set )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the first (lowest) element currently in this set."}, {"role": "assistant", "content": "Object Collections.SortedSet.first (Object set  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes from the underlying collection the last element returned by the iterator."}, {"role": "assistant", "content": "void Collections.Iterator.remove (Object iterator)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns true, if the iteration has more elements."}, {"role": "assistant", "content": "boolean Collections.Iterator.hasNext (Object iterator)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the next element in the iteration"}, {"role": "assistant", "content": "Object Collections.Iterator.next (Object iterator)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the keys contained in this map."}, {"role": "assistant", "content": "Object Collections.Map.keySet ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "the number of key-value mappings in this map."}, {"role": "assistant", "content": "int Collections.Map.size ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Copies all of the mappings from the specified map to this map."}, {"role": "assistant", "content": "void Collections.Map.putAll ( Object map, Object mapToBeAdded )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the mappings contained in this map."}, {"role": "assistant", "content": "Object Collections.Map.entrySet ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a  view of the values contained in this map."}, {"role": "assistant", "content": "Object Collections.Map.values ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of HashMap for the given mapID. If the map already exists, return the existing Map."}, {"role": "assistant", "content": "Object Collections.Map.createHashMapWithId ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns true, if this map contains no key-value mappings"}, {"role": "assistant", "content": "boolean Collections.Map.isEmpty ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns true, if this map maps one or more keys to the specified value."}, {"role": "assistant", "content": "boolean Collections.Map.containsValue ( Object map, Object value )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of HashMap.\nThe hashmap returned by this function is not thread safe hence any updates if using a multi-threaded RETE should be done carefully."}, {"role": "assistant", "content": "Object Collections.Map.createHashMap ( )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes the mapping for a key from this map if it is present."}, {"role": "assistant", "content": "Object Collections.Map.remove ( Object map, Object key )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of TreeMap for the given mapID. If the map already exists, return the existing Map."}, {"role": "assistant", "content": "Object Collections.Map.createTreeMapWithId ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Deletes the instance of Map  for the given mapId.\nThis function can not be used if the collection is created with createMap()."}, {"role": "assistant", "content": "Object Collections.Map.deleteMap ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of TreeMap."}, {"role": "assistant", "content": "Object Collections.Map.createTreeMap ( )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the instance of Map  for the given mapId."}, {"role": "assistant", "content": "Object Collections.Map.getMap ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of LinkedHashMap."}, {"role": "assistant", "content": "Object Collections.Map.createLinkedHashMap ( )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes all of the mappings from this map."}, {"role": "assistant", "content": "void Collections.Map.clear ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Associates the specified value with the specified key in this map."}, {"role": "assistant", "content": "Object Collections.Map.put ( Object map, Object key, Object value )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns true, if this map contains a mapping for the specified."}, {"role": "assistant", "content": "boolean Collections.Map.containsKey ( Object map, Object key )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates user specified Map implementation"}, {"role": "assistant", "content": "Object Collections.Map.createMap ( String className )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the value to which the specified key is mapped."}, {"role": "assistant", "content": "Object Collections.Map.get ( Object map, Object key )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of user specified Map implementation for the given mapID. If the map already exists, return the existing Map."}, {"role": "assistant", "content": "Object Collections.Map.createMapWithId ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of LinkedHashMap for the given mapID. If the map already exists, return the existing Map."}, {"role": "assistant", "content": "Object Collections.Map.createLinkedHashMapWithId ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Replaces the value corresponding to this entry with the specified value."}, {"role": "assistant", "content": "Object Collections.Map.Entry.setValue ( Object entry  ,Object value   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the key corresponding to this entry.."}, {"role": "assistant", "content": "Object Collections.Map.Entry.getKey ( Object entry)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the value corresponding to this entry."}, {"role": "assistant", "content": "Object Collections.Map.Entry.getValue ( Object entry)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the keys contained in this map."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.keySet ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "the number of key-value mappings in this map."}, {"role": "assistant", "content": "int Collections.Map.Concurrent.size ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Copies all of the mappings from the specified map to this map."}, {"role": "assistant", "content": "void Collections.Map.Concurrent.putAll ( Object map, Object mapToBeAdded )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the mappings contained in this map."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.entrySet ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a  view of the values contained in this map."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.values ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of ConcurrentHashMap for the given mapID. If the map already exists, return the existing Map."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.createHashMapWithId ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns true, if this map contains no key-value mappings"}, {"role": "assistant", "content": "boolean Collections.Map.Concurrent.isEmpty ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns true, if this map maps one or more keys to the specified value."}, {"role": "assistant", "content": "boolean Collections.Map.Concurrent.containsValue ( Object map, Object value )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of ConcurrentHashMap."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.createConcurrentHashMap (  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of HashMap.\nThe hashmap returned by this function is not thread safe hence any updates if using a multi-threaded RETE should be done carefully."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.createHashMap ( )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Remove entry for key only if currently mapped to given value. The action is performed atomically."}, {"role": "assistant", "content": "boolean Collections.Map.Concurrent.remove ( Object map  ,Object key ,Object value  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of TreeMap for the given mapID. If the map already exists, return the existing Map."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.createTreeMapWithId ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Replace entry for key only if currently mapped to some value. The action is performed atomically."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.replace ( Object map  ,Object key ,Object value  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Deletes the instance of Map  for the given mapId.\nThis function can not be used if the collection is created with createMap()."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.deleteMap ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of TreeMap."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.createTreeMap ( )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the instance of Map  for the given mapId."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.getMap ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of LinkedHashMap."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.createLinkedHashMap ( )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes all of the mappings from this map."}, {"role": "assistant", "content": "void Collections.Map.Concurrent.clear ( Object map )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Associates the specified value with the specified key in this map."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.put ( Object map, Object key, Object value )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns true, if this map contains a mapping for the specified."}, {"role": "assistant", "content": "boolean Collections.Map.Concurrent.containsKey ( Object map, Object key )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "If the specified key is not already associated with a value, associate it with the given value. The action is performed atomically."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.putIfAbsent ( Object map  ,Object key ,Object value  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates user specified Map implementation"}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.createMap ( String className )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the value to which the specified key is mapped."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.get ( Object map, Object key )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of user specified Map implementation for the given mapID. If the map already exists, return the existing Map."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.createMapWithId ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Replace entry for key only if currently mapped to given value. The action is performed atomically."}, {"role": "assistant", "content": "boolean Collections.Map.Concurrent.replaceIfEqualToGivenValue ( Object map  ,Object key ,Object oldValue, Object newValue  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of LinkedHashMap for the given mapID. If the map already exists, return the existing Map."}, {"role": "assistant", "content": "Object Collections.Map.Concurrent.createLinkedHashMapWithId ( String mapId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the instance of List  for the given listID."}, {"role": "assistant", "content": "Object Collections.List.getList ( String listId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns a view of the portion of this list between the specified \n fromIndex, inclusive, and toIndex , exclusive."}, {"role": "assistant", "content": "Object Collections.List.subList ( Object list  ,int fromIndex  ,int toIndex   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the index of the last occurrence of the specified element \n in this list, or -1 if this list does not contain the element."}, {"role": "assistant", "content": "int Collections.List.lastIndexOf ( Object list  ,Object element   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Creates user specified List implementation"}, {"role": "assistant", "content": "Object Collections.List.createList ( String className   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and returns instance of ArrayList."}, {"role": "assistant", "content": "Object Collections.List.createArrayList (  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Inserts the specified element at the specified position in this collection."}, {"role": "assistant", "content": "void Collections.List.add ( Object collection  ,int index  ,Object element)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of LinkedList for the given listID. If the list already exists, return the existing List."}, {"role": "assistant", "content": "Object Collections.List.createLinkedListWithId ( String listId  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Deletes the instance of List  for the given listID.\nThis function can not be used if the collection is created with createList()."}, {"role": "assistant", "content": "Object Collections.List.deleteList ( String listId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and returns instance of LinkedList."}, {"role": "assistant", "content": "Object Collections.List.createLinkedList (  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of ArrayList for the given listID. If the list already exists, return the existing List."}, {"role": "assistant", "content": "Object Collections.List.createArrayListWithId ( String listId  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of user specified list implementation for the given listID. If the list already exists, return the existing List."}, {"role": "assistant", "content": "Object Collections.List.createListWithId ( String className , String listId  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Inserts all of the elements in the specified collection into this collection at the specified position."}, {"role": "assistant", "content": "boolean Collections.List.addAll ( Object collection  ,int index  ,Object collection )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the index of the first occurrence of the specified element \n in this list, or -1 if this list does not contain the element."}, {"role": "assistant", "content": "int Collections.List.indexOf ( Object list  ,Object element   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Replaces the element at the specified position in this list with the specified element."}, {"role": "assistant", "content": "Object Collections.List.set ( Object list  ,int index  ,Object element   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the element at the specified position in this list."}, {"role": "assistant", "content": "Object Collections.List.get ( Object list  ,int index   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of HashSet for the given setID. If the set already exists, return the existing Set."}, {"role": "assistant", "content": "Object Collections.Set.createHashSetWithId ( String setId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of user specified Set implementation."}, {"role": "assistant", "content": "Object Collections.Set.createSet ( String className   )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of TreeSet for the given setID. If the set already exists, return the existing Set."}, {"role": "assistant", "content": "Object Collections.Set.createTreeSetWithId ( String setId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return the instance of LinkedHashSet."}, {"role": "assistant", "content": "Object Collections.Set.createLinkedHashSet (  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the instance of Set  for the given setID.\nThis function can not be used when a set is created using createSet(), createHashSet(), createLinkedHashSet() and createTreeSet() functions."}, {"role": "assistant", "content": "Object Collections.Set.getSet ( String setId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return the instance of TreeSet."}, {"role": "assistant", "content": "Object Collections.Set.createTreeSet (  )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Deletes the instance of Set  for the given setID.\nThis function can not be used if the collection is created with createSet()."}, {"role": "assistant", "content": "Object Collections.Set.deleteSet ( String setId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return the instance of HashSet."}, {"role": "assistant", "content": "Object Collections.Set.createHashSet ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of user specified Set implementation for the given setID. If the list already exists, return the existing Set."}, {"role": "assistant", "content": "Object Collections.Set.createSetWithId ( String className,  String setId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create and return instance of LinkedHashSet for the given setID. If the set already exists, return the existing Set."}, {"role": "assistant", "content": "Object Collections.Set.createLinkedHashSetWithId ( String setId )"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the current RuleSession Name."}, {"role": "assistant", "content": "String Engine.sessionName ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Execute the rules in the preprocessor context. Whatever is present (mainly asserted or deleted, will be used for execution;"}, {"role": "assistant", "content": "void Engine.executeRules()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the total number of rules fired in current working memory since the counter was last reset."}, {"role": "assistant", "content": "long Engine.numberOfRulesFired ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the total number of instances exist in the working memory."}, {"role": "assistant", "content": "int Engine.numberOfInstances()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "When a relative path to a file is provided, then the byte representation of the file contents are returned."}, {"role": "assistant", "content": "Object Engine.loadResourceAsByte(String uri)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Loads the Entity that comes from Cluster Subscription into the working memory only and does not execute any rule for it.This can only be used in the preprocessor for the Entity which Subscribes Cluster."}, {"role": "assistant", "content": "void Engine.clusterSubscriptionLoadOnly()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the maximum memory size of the JVM."}, {"role": "assistant", "content": "long Engine.jvmMemoryMax ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Execute the rules in the preprocessor context. Whatever is present (mainly asserted or deleted, will be used for execution;"}, {"role": "assistant", "content": "void Engine.assertEvent_Async()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns currently executing Rule's Identifiers (arguments), or 'null' if there is none."}, {"role": "assistant", "content": "Object[] Engine.currentRuleIdentifiers()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the current execution context.  The first element in the String[] indicates where\nthis call is executing under. The remaining elements in the String[] contains the objects\nthat associated with the context.  For example, if this is executing in Rule A.B.C and the\nscope is InstanceX. This function will returns { $1Rule=A.B.C$1, $1InstanceX@id=12@extId=123$1 }."}, {"role": "assistant", "content": "String[] Engine.executionContext()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the name of the currently executing Rule, or \"\" if there is none."}, {"role": "assistant", "content": "String Engine.ruleName()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns currently executing RuleFunction, or 'null' if there is none."}, {"role": "assistant", "content": "Object Engine.currentRuleFunction()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Resets the counter that tracks the total number of rules fired in current working memory."}, {"role": "assistant", "content": "void Engine.resetNumberOfRulesFired ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Execute the rules in the preprocessor context. Whatever is present (mainly asserted or deleted, will be used for execution;"}, {"role": "assistant", "content": "void Engine.executeRulesAsync(String workManagerID)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns currently executing Rule's Conditions, or 'null' if there is none."}, {"role": "assistant", "content": "Object[] Engine.currentRuleConditions()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns currently executing Rule, or 'null' if there is none."}, {"role": "assistant", "content": "Object Engine.currentRule()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Runs the Java Garbage Collection."}, {"role": "assistant", "content": "void Engine.gc()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Invoke a rule function by name."}, {"role": "assistant", "content": "Object Engine.invokeRuleFunction(String uri, Object[] arguments)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the name of the current thread."}, {"role": "assistant", "content": "String Engine.threadName()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Put current rule session to sleep. Caution! In case of single-threaded RTC, this method may block current thread as well as all other rule sessions."}, {"role": "assistant", "content": "void Engine.sleep(long millisec)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns currently executing Rule's Actions, or 'null' if there is none."}, {"role": "assistant", "content": "Object[] Engine.currentRuleActions"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the Engine name."}, {"role": "assistant", "content": "String Engine.engineName ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Shutdown the engine."}, {"role": "assistant", "content": "void Engine.shutdown(boolean immediate)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an estimate of the free memory available to the JVM."}, {"role": "assistant", "content": "long Engine.jvmMemoryFree ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns an estimate of the used memory in the JVM."}, {"role": "assistant", "content": "long Engine.jvmMemoryUsed ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the current Index of the RuleSession in the EAR's. If numLocal is provided, then it will give that info."}, {"role": "assistant", "content": "int Engine.sessionIndex ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "When a relative path to a file is provided, then the contents of the file are returned in String format. The type of encoding to be used can be determined by the user. In case no encoding is provided, then UTF-8 is used by default."}, {"role": "assistant", "content": "String Engine.loadResourceAsString(String uri, String encoding)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Find all the matched tuples of a rule given partial input set.  And for each tuple, execute the rule action."}, {"role": "assistant", "content": "Object[] Engine.invokeRule(String uri, Object[] inputSet, boolean dirtyRead)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the total number of events exist in the working memory."}, {"role": "assistant", "content": "int Engine.numberOfEvents()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the name of the currently executing RuleFunction, or \"\" if there is none.  For example, if executing RuleFunction A.B.C, this function will return \"A.B.C\"."}, {"role": "assistant", "content": "String Engine.ruleFunctionName()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the default timezone id. null sets it back to the value at JVM start."}, {"role": "assistant", "content": "void Engine.Locale.setDefaultTimeZone(String tz)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the language in current locale."}, {"role": "assistant", "content": "String Engine.Locale.getLanguage ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the country code in current locale."}, {"role": "assistant", "content": "String Engine.Locale.getCountry ()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the default timezone; value depends on JVM implementation."}, {"role": "assistant", "content": "String Engine.Locale.getDefaultTimeZone()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Removes the engine variable of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition."}, {"role": "assistant", "content": "void Engine.Variable.removeEngineVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as long[] of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns null if the variable is not set."}, {"role": "assistant", "content": "long[] Engine.Variable.getEngineLongArrayVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineIntVar(String varName, int value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as DateTime of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns null if the variable is not set."}, {"role": "assistant", "content": "DateTime Engine.Variable.getEngineDateTimeVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as String of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns null if the variable is not set."}, {"role": "assistant", "content": "String Engine.Variable.getEngineStringVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as int of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns 0 if the variable is not set."}, {"role": "assistant", "content": "int Engine.Variable.getEngineIntVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as int[] of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns null if the variable is not set."}, {"role": "assistant", "content": "int[] Engine.Variable.getEngineIntArrayVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineLongArrayVar(String varName, long[] value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineBooleanArrayVar(String varName, boolean[] value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition."}, {"role": "assistant", "content": "void Engine.Variable.setEngineStringArrayVar(String varName, String[] value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineBooleanVar(String varName, boolean value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as double[] of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function 0.0 false if the variable is not set."}, {"role": "assistant", "content": "double Engine.Variable.getEngineDoubleArrayVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineDoubleVar(String varName, double value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineObjectVar(String varName, Object value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as DateTime[] of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns null if the variable is not set."}, {"role": "assistant", "content": "DateTime[] Engine.Variable.getEngineDateTimeArrayVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineDateTimeVar(String varName, DateTime value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineIntArrayVar(String varName, int[] value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as double of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function 0.0 false if the variable is not set."}, {"role": "assistant", "content": "double Engine.Variable.getEngineDoubleVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as Object of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns null if the variable is not set."}, {"role": "assistant", "content": "Object Engine.Variable.getEngineObjectVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as boolean[] of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns null if the variable is not set."}, {"role": "assistant", "content": "boolean[] Engine.Variable.getEngineBooleanArrayVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineDoubleArrayVar(String varName, double[] value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as boolean of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns false if the variable is not set."}, {"role": "assistant", "content": "boolean Engine.Variable.getEngineBooleanVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as long of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns 0L if the variable is not set."}, {"role": "assistant", "content": "long Engine.Variable.getEngineLongVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Gets the engine variable as String[] of name varName.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.  This function returns null if the variable is not set."}, {"role": "assistant", "content": "String[] Engine.Variable.getEngineStringArrayVar(String varName)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineStringVar(String varName, String value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineDateTimeArrayVar(String varName, DateTime[] value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sets the engine variable of name varName to value.  Engine variable is a in-memory variable share\nacross all the rule sessions for a RuleServiceProvider.  Rule condition won't have dependency of this variable i.e. changes\nof this variable won't retrigger the rule if it is used in the condition.\n* @.cautions none"}, {"role": "assistant", "content": "void Engine.Variable.setEngineLongVar(String varName, long value)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Cancels all rule actions scheduled to be executed in the current RTC.  Cancels all pending external changes in the current RTC: new/modified/deleted cache-based entities, events to send, event acknowledgments and scheduled events to schedule.  The rollback operation (if implemented) of the destination of the event (if any) that triggered the RTC will be invoked."}, {"role": "assistant", "content": "void Engine.Rtc.abortRTC()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the current agenda of the current RTC."}, {"role": "assistant", "content": "String Engine.Rtc.printAgenda()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Turns off the BusinessEvents Profiler and writes the profile data into a file specified\nwhen the Profiler was turned on."}, {"role": "assistant", "content": "void Engine.Profiler.stopCollecting()"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Turns on the BusinessEvents Profiler and starts collecting data for a specified duration. At the end of the duration or when the Profiler is turned off before the end of the duration, profiling data will be output to a file in comma separated value format."}, {"role": "assistant", "content": "void Engine.Profiler.startCollectingToFile(String fileName, int level, long duration)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This creates a new Exception Instance based on the data passed in."}, {"role": "assistant", "content": "Exception Exception.newException (String errorType, String message, Exception cause)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "xml"}, {"role": "assistant", "content": "Event Event.createEventFromXML (String uri, String xml)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Id"}, {"role": "assistant", "content": "Event Event.getById (Object Id)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Acknowledge the event passed."}, {"role": "assistant", "content": "void Event.acknowledgeEvent (SimpleEvent evt)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "request"}, {"role": "assistant", "content": "boolean Event.replyEvent(SimpleEvent request, SimpleEvent reply)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Make synchronous request/response calls using JMS. Sends an event and waits for a response to be returned.Each request creates and listens on a JMS temporary queue for a response."}, {"role": "assistant", "content": "Object Event.requestEvent(SimpleEvent requestEvent, String responseEventURI, String requestEventDestinationURI, long timeout, String properties)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Assert an AdvisoryEvent with user defined fields."}, {"role": "assistant", "content": "void Event.assertAdvisoryEvent(String category, String type, String message)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "extId"}, {"role": "assistant", "content": "SimpleEvent Event.getByExtIdByUri (String extId, String uri)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Makes the target SimpleEvent use the same payload as the source SimpleEvent."}, {"role": "assistant", "content": "void Event.setPayload(SimpleEvent target, SimpleEvent source)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Consume the Event passed (removes the Event from working memory)."}, {"role": "assistant", "content": "void Event.consumeEvent (Event evt)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Asserts a SimpleEvent into the working memory."}, {"role": "assistant", "content": "SimpleEvent Event.assertEvent (SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This function serializes the event to JSON string"}, {"role": "assistant", "content": "String Event.serializeToJSON(SimpleEvent event, boolean pretty)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "byte[]"}, {"role": "assistant", "content": "Object Event.getPayloadAsBytes(SimpleEvent input)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the payload associated with the event"}, {"role": "assistant", "content": "Object Event.getPayload(SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This function serializes the event to XML string"}, {"role": "assistant", "content": "String Event.serializeToXML(SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Validates the payload of the event in the current RuleSession. Validation will throw an Exception if the validation failed."}, {"role": "assistant", "content": "void Event.validatePayload(SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create a new SimpleEvent using the an XSLT EventBuilder."}, {"role": "assistant", "content": "SimpleEvent Event.createEvent (String xslt-template)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sends a SimpleEvent to a Destination with custom destination properties.\nThe Destination in turn specifies the Channel where the Event will be sent."}, {"role": "assistant", "content": "SimpleEvent Event.routeTo(SimpleEvent event, String destinationPath, String properties) {"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns The destination URI of the specified event."}, {"role": "assistant", "content": "String Event.getDestinationURI (SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "json"}, {"role": "assistant", "content": "Event Event.createEventFromJSON(String uri, String json)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "evt"}, {"role": "assistant", "content": "SimpleEvent Event.sendEvent (SimpleEvent evt)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "xml"}, {"role": "assistant", "content": "Event Event.Ext.createEventFromXML (String uri, String xml)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Id"}, {"role": "assistant", "content": "Event Event.Ext.getById (Object Id)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Acknowledge the event passed."}, {"role": "assistant", "content": "void Event.Ext.acknowledgeEvent (SimpleEvent evt)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "request"}, {"role": "assistant", "content": "boolean Event.Ext.replyEvent(SimpleEvent request, SimpleEvent reply)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Make synchronous request/response calls using JMS. Sends an event and waits for a response to be returned.Each request creates and listens on a JMS temporary queue for a response."}, {"role": "assistant", "content": "Object Event.Ext.requestEvent(SimpleEvent requestEvent, String responseEventURI, String requestEventDestinationURI, long timeout, String properties)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "request"}, {"role": "assistant", "content": "Object Event.Ext.replyEventImmediate(SimpleEvent request, SimpleEvent reply)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Assert an AdvisoryEvent with user defined fields."}, {"role": "assistant", "content": "void Event.Ext.assertAdvisoryEvent(String category, String type, String message)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "extId"}, {"role": "assistant", "content": "SimpleEvent Event.Ext.getByExtIdByUri (String extId, String uri)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Makes the target SimpleEvent use the same payload as the source SimpleEvent."}, {"role": "assistant", "content": "void Event.Ext.setPayload(SimpleEvent target, SimpleEvent source)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Consume the Event passed (removes the Event from working memory)."}, {"role": "assistant", "content": "void Event.Ext.consumeEvent (Event evt)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "evt"}, {"role": "assistant", "content": "Object Event.Ext.sendEventImmediate(SimpleEvent evt) throws Exception"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Asserts a SimpleEvent into the working memory."}, {"role": "assistant", "content": "SimpleEvent Event.Ext.assertEvent (SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This function serializes the event to JSON string"}, {"role": "assistant", "content": "String Event.Ext.serializeToJSON(SimpleEvent event, boolean pretty)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "byte[]"}, {"role": "assistant", "content": "Object Event.Ext.getPayloadAsBytes(SimpleEvent input)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns the payload associated with the event"}, {"role": "assistant", "content": "Object Event.Ext.getPayload(SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "This function serializes the event to XML string"}, {"role": "assistant", "content": "String Event.Ext.serializeToXML(SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Validates the payload of the event in the current RuleSession. Validation will throw an Exception if the validation failed."}, {"role": "assistant", "content": "void Event.Ext.validatePayload(SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Create a new SimpleEvent using the an XSLT EventBuilder."}, {"role": "assistant", "content": "SimpleEvent Event.Ext.createEvent (String xslt-template)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sends a SimpleEvent to a Destination with custom destination properties.\nThe Destination in turn specifies the Channel where the Event will be sent."}, {"role": "assistant", "content": "SimpleEvent Event.Ext.routeToExt(SimpleEvent event, String destinationPath, String properties, boolean forceImmediate) throws Exception"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sends a SimpleEvent to a Destination with custom destination properties.\nThe Destination in turn specifies the Channel where the Event will be sent."}, {"role": "assistant", "content": "SimpleEvent Event.Ext.routeTo(SimpleEvent event, String destinationPath, String properties) {"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "request"}, {"role": "assistant", "content": "boolean Event.Ext.replyEventExt(SimpleEvent request, SimpleEvent reply, boolean forceImmediate)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Returns The destination URI of the specified event."}, {"role": "assistant", "content": "String Event.Ext.getDestinationURI (SimpleEvent event)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "evt"}, {"role": "assistant", "content": "SimpleEvent Event.Ext.sendEventExt(SimpleEvent evt, boolean forceImmediate) throws Exception"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "json"}, {"role": "assistant", "content": "Event Event.Ext.createEventFromJSON(String uri, String json)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "Sends a SimpleEvent to a Destination with custom destination properties. The Destination in turn specifies the Channel where the Event will be sent."}, {"role": "assistant", "content": "Object Event.Ext.routeToImmediate(SimpleEvent event, String destinationPath, String properties)"}]}
{"messages": [{"role": "system", "content": "BE Assistant"}, {"role": "user", "content": "evt"}, {"role": "assistant", "content": "SimpleEvent Event.Ext.sendEvent (SimpleEvent evt)"}]}
