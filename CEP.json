[{"Function": "LoadBalancer.Receiver.discardReceiver()", "Signature": "discardReceiver(Object loadBalancedReceiver)", "Domain": "ACTION", "Description": "Discards the receiver.", "Parameters": [{"Name": "loadBalancedReceiver", "Type": "Object", "Description": "The opaque handle to the loadbalancer receiver object created in the createTcpReceiverFor(String, int, String, String) call."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "LoadBalancer.Receiver.createTcpReceiverFor()", "Signature": "Object createTcpReceiverFor(String adhocConfigName)", "Domain": "ACTION", "Description": "Creates and returns a local receiver that receives load balanced messages from remote senders. Messages will arrive on the local destination specified in the configuration.", "Parameters": [{"Name": "adhocConfigName", "Type": "String", "Description": "The name of the adhoc load balancer configuration to use to receive messages. Ex: adhoc_1"}], "Returns": [{"Type": "Object", "Description": "An opaque handle to the loadbalancer receiver object."}], "Cautions": "none"},{"Function": "LoadBalancer.Receiver.Membership.isInFlux()", "Signature": "boolean isInFlux()", "Domain": "ACTION", "Description": "Returns true if the loadbalancer node membership is in a state of change - i.e nodes joining and/or leaving currently or in the recent past.", "Parameters": "None.", "Returns": [{"Type": "boolean", "Description": "true|false"}], "Cautions": "none"},{"Function": "LoadBalancer.Receiver.Membership.getRecentChangeAt()", "Signature": "long getRecentChangeAt()", "Domain": "ACTION", "Description": "Returns the timestamp (1970 epoch milliseconds) at which the most recent membership change occured.", "Parameters": "None.", "Returns": [{"Type": "long", "Description": "Timestamp in milliseconds"}], "Cautions": "none"},{"Function": "LoadBalancer.Router.send()", "Signature": "void send(Object loadBalancer, SimpleEvent event, String routingKey)", "Domain": "ACTION", "Description": "Sends an event to a remote receiver. The routing decision is made using the routing key.", "Parameters": [{"Name": "loadBalancer", "Type": "Object", "Description": "The opaque handle to the loadbalancer that was created in the createLoadBalancerTo(String, String) call."}, {"Name": "event", "Type": "SimpleEvent", "Description": "The event to send the message to."}, {"Name": "routingKey", "Type": "String", "Description": "The key that will be used to choose a receiver. If the topology has not changed, then messages with the same key sent from any sender will be received by the same receiver."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "LoadBalancer.Router.discardLoadBalancer()", "Signature": "void discardLoadBalancer(Object loadBalancer)", "Domain": "ACTION", "Description": "Discards the load balancer.", "Parameters": [{"Name": "loadBalancer", "Type": "Object", "Description": "The opaque handle to the loadbalancer that was created in the createLoadBalancerTo(String, String) call."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "LoadBalancer.Router.createLoadBalancerTo()", "Signature": "Object createLoadBalancerTo(String adhocConfigName)", "Domain": "ACTION", "Description": "Creates and returns a load balancer that can be used to send messages to remote, load balanced destinations.", "Parameters": [{"Name": "adhocConfigName", "Type": "String", "Description": "The name of the adhoc load balancer configuration to use to send messages to. Ex: adhoc_1"}], "Returns": [{"Type": "Object", "Description": "An opaque handle to the loadbalancer object that can be used to send messages."}], "Cautions": "none"},{"Function": "Store.putAll()", "Signature": "void putAll (String url, Object[] putObjects)", "Domain": "ACTION", "Description": "Puts the items into the store. Need to make sure all containers for the associated item/entity are opened using Store.open api before putAll call. Make sure concept and container name should be same for putAll() Operation.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "putObjects", "Type": "Object[]", "Description": "Item or Entity(Concept/Event) object's (with key) to put into the store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.update()", "Signature": "void update (String url, String containerName, Object updateObject)", "Domain": "ACTION", "Description": "Updates the given Item/Entity within the specified container(i.e.Table in ActiveSpaces or Name of the Ignite Cache). If transactional behavior is desired, call Store.Transactions.enableTransactions before opening the container and then perform put operation. Available only with ActiveSpaces 4.5.0 and above.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) where the item gets put"}, {"Name": "updateObject", "Type": "Object", "Description": "Item or Entity(Concept/Event) to update in the container"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.getAll()", "Signature": "Object[] getAll (String url, Object[] getObjects)", "Domain": "ACTION", "Description": "Gets the items from the store. Need to make sure all containers for the associated item/entity are opened using Store.open api before getAll call. Make sure concept and container name should be same for getAll() Operation.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "getObjects", "Type": "Object[]", "Description": "Item or Entity(Concept/Event) object's (with key) to get from the store"}], "Returns": [{"Type": "Object[]", "Description": "Item or Entity(Concept/Event) objects"}], "Cautions": "none"},{"Function": "Store.deleteAll()", "Signature": "void deleteAll (String url, Object[] deleteObjects)", "Domain": "ACTION", "Description": "Deletes the items from the store. Need to make sure all containers for the associated item/entity are opened using Store.open api before deleteAll call. Make sure concept and container name should be same for deleteAll() Operation.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "deleteObjects", "Type": "Object[]", "Description": "Item or Entity(Concept/Event) object's (with key) to delete from the store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.query()", "Signature": "Object query (String url, String query, Object[] queryParameters, Object queryOptions, String returnEntityPath)", "Domain": "ACTION", "Description": "Returns an Iterator of Item/Entity objects from the Store that match the specified filter.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "query", "Type": "String", "Description": "Query that needs to be executed over the Store. Supports parameterized query i.e. select tid from t where age > ?."}, {"Name": "queryParameters", "Type": "Object[]", "Description": "Parameters applicable to the query."}, {"Name": "queryOptions", "Type": "Object", "Description": "If any, query options that govern the behavior of query execution. Refer to Store.QueryOptions.*"}, {"Name": "returnEntityPath", "Type": "String", "Description": "Return entity path. Only if the expected iterator element should be an Entity(Event/Concept), else should be null."}], "Returns": [{"Type": "Object", "Description": "Iterator of Item/Entity objects that match the filter"}], "Cautions": "none"},{"Function": "Store.close()", "Signature": "void close (String url, String containerName)", "Domain": "ACTION", "Description": "Closes the container. No operation can be performed on this container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) after closing it.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Container Name(i.e. Table in ActiveSpaces or Name of the Ignite Cache)"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.closeQuery()", "Signature": "void closeQuery (Object queryIterator)", "Domain": "ACTION", "Description": "Closes the query and its dependent objects. Use this API only if you need to exit without or inbetween query result iteration. By default, on complete query result iteration query close happens implicitly, no need for explicit call to this API.", "Parameters": [{"Name": "queryIterator", "Type": "Object", "Description": "Iterator returned via the 'query' call"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.put()", "Signature": "void put (String url, String containerName, Object putObject)", "Domain": "ACTION", "Description": "Puts the given Item/Entity within the specified container(i.e.Table in ActiveSpaces or Name of the Ignite Cache). If transactional behavior is desired, call Store.Transactions.enableTransactions before opening the container and then perform put operation.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) where the item gets put"}, {"Name": "putObject", "Type": "Object", "Description": "Item or Entity(Concept/Event) to put in the container"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.open()", "Signature": "void open (String url, String containerName)", "Domain": "ACTION", "Description": "Opens a container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) for operations(put/get/delete). If transactional behavior is desired, call Store.Transactions.enableTransactions before opening the container.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) Name"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.disconnect()", "Signature": "void disconnect (String url)", "Domain": "ACTION", "Description": "Disconnects from the Store. And closes all the associated connections.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.executeUpdate()", "Signature": "long executeUpdate (String url, String query)", "Domain": "ACTION", "Description": "Returns the number of store items effected based on the executeUpdate. Note - This api has a prerequisite of the tibdgadmin service running when store type is AS.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "query", "Type": "String", "Description": "Query that needs to be executed over the Store. Update supports Create/Drop Table/Index.Additionally Ignite supports Update/Delete/Insert/Alter query"}], "Returns": [{"Type": "long", "Description": "Number of store items effected by the update query"}], "Cautions": "none"},{"Function": "Store.delete()", "Signature": "void delete (String url, String containerName, Object deleteObject)", "Domain": "ACTION", "Description": "Removes the given item from the specified container(i.e. Table in ActiveSpaces or Name of the Ignite Cache). If transactional behavior is desired, call Store.Transactions.enableTransactions before opening the container and then perform delete operation.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) from where the item is deleted"}, {"Name": "deleteObject", "Type": "Object", "Description": "Item object (with key) to remove from the container"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.connect()", "Signature": "void connect (Object storeConnectionInfo)", "Domain": "ACTION", "Description": "Connects to specified Store. All connections based on the pool size setting are connected", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection info details. Refer Store.ConnectionInfo.* for more details."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.get()", "Signature": "Object get (String url, String containerName, Object getObject)", "Domain": "ACTION", "Description": "Gets the item from the specified container(i.e. Table in ActiveSpaces or Name of the Ignite Cache).", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) from where the item is fetched"}, {"Name": "getObject", "Type": "Object", "Description": "Item or Entity(Concept/Event) object (with key) to get from the container"}], "Returns": [{"Type": "Object", "Description": "Item or Entity(Concept/Event)"}], "Cautions": "none"},{"Function": "Store.Util.getClientVersion()", "Signature": "String getClientVersion (String storeType)", "Domain": "ACTION", "Description": "Gets the client library version details used to connect to the Store.", "Parameters": [{"Name": "storeType", "Type": "String", "Description": "Store Type (valid values - AS)"}], "Returns": [{"Type": "String", "Description": "Client version details"}], "Cautions": "none"},{"Function": "Store.Util.setLogLevel()", "Signature": "void setLogLevel (String storeType, String logLevel)", "Domain": "ACTION", "Description": "Sets the log level for the underlying Store", "Parameters": [{"Name": "storeType", "Type": "String", "Description": "Store Type (valid values - AS)"}, {"Name": "logLevel", "Type": "String", "Description": "Log Level. Possible values INFO/DEBUG/WARN/SEVERE/VERBOSE/OFF"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Util.setLogHandler()", "Signature": "void setLogHandler (String storeType, Object logHandler)", "Domain": "ACTION", "Description": "Sets the custom log handler", "Parameters": [{"Name": "storeType", "Type": "String", "Description": "Store Type (valid values - AS)"}, {"Name": "logHandler", "Type": "Object", "Description": "Instance of an custom implementation of log handler specific to the Store. Needs to implement interface com.tibco.datagrid.LogHandler."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Util.setLogFiles()", "Signature": "void setLogFiles (String storeType, String filePrefix, long maxFileSize, int maxFiles)", "Domain": "ACTION", "Description": "Sets the log file details", "Parameters": [{"Name": "storeType", "Type": "String", "Description": "Store Type (valid values - AS)"}, {"Name": "filePrefix", "Type": "String", "Description": "Prefix for the log files"}, {"Name": "maxFileSize", "Type": "long", "Description": "Max file size post which the Store rotates the log file. The value should be greater than 102400 bytes (100kb)"}, {"Name": "maxFiles", "Type": "int", "Description": "Max number of log files"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Container.Ignite.unlock()", "Signature": "boolean unlock (String url, String containerName, String key)", "Domain": "ACTION", "Description": "Unlock the lock acquired on the key.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Cache Name)"}, {"Name": "key", "Type": "String", "Description": "Key on which we need to take the unlock"}], "Returns": [{"Type": "boolean", "Description": "Returns true if grid releases the lock"}], "Cautions": "none"},{"Function": "Store.Container.Ignite.createQueryEntity()", "Signature": "Object createQueryEntity (String tableName,Object fields)", "Domain": "ACTION", "Description": "Create a new QueryEntity with the specified table name, also returns the newly created QueryEntity instance.", "Parameters": [{"Name": "tableName", "Type": "String", "Description": "Name of the table"}, {"Name": "fields", "Type": "Object", "Description": "LinkedHashMap which has key as field name and value as field type"}], "Returns": [{"Type": "QueryEntity", "Description": "Newly created QueryEntity instance."}], "Cautions": "none"},{"Function": "Store.Container.Ignite.createCacheConfig()", "Signature": "Object createCacheConfig (String cacheName,String schemaName)", "Domain": "ACTION", "Description": "Create a new CacheConfiguration with the specified cache name, also returns the newly created CacheConfiguration instance.", "Parameters": [{"Name": "cacheName", "Type": "String", "Description": "Name of the Ignite Cache"}, {"Name": "schemaName", "Type": "String", "Description": "Name of the Schema Name. This parameter is required when query is used else it is optional."}], "Returns": [{"Type": "CacheConfiguration", "Description": "Newly created CacheConfiguration instance."}], "Cautions": "none"},{"Function": "Store.Container.Ignite.setContainerKeyField()", "Signature": "void setContainerKeyField (String url, String containerName, String keyFieldNames)", "Domain": "ACTION", "Description": "Set the mandatory Key Field Name that is to be used as Key for cache operations.eg. setContainerKeyField(url,containerName,\"key1,key2\")", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Cache Name)"}, {"Name": "keyFieldName", "Type": "String", "Description": "Name of the Field... that is to be used as Key field for Cache corresponding to this Container eg key1,key2"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Container.Ignite.setAtomicityMode()", "Signature": "void setAtomicityMode (Object cacheConfig, String atomicityMode)", "Domain": "ACTION", "Description": "Sets the Atomicity Mode for the specified CacheConfiguration. Default when not set is \"ATOMIC\".", "Parameters": [{"Name": "cacheConfig", "Type": "Object", "Description": "Ignite CacheConfiguration instance."}, {"Name": "atomicityMode", "Type": "String", "Description": "Desired Atomicity Mode for the Cache. Options \"TRANSACTIONAL\" or \"ATOMIC\"."}], "Returns": [{"Type": "void"}], "Cautions": "When using transactions prefer using atomicity mode as \"TRANSACTIONAL\""},{"Function": "Store.Container.Ignite.createContainer()", "Signature": "void createContainer (String url, String containerName, Object cacheConfig)", "Domain": "ACTION", "Description": "Create a Store container in the Store identified by the Url (i.e Create the Ignite Cache if not already present).", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container. Should be same as the Cache name."}, {"Name": "cacheConfig", "Type": "Object", "Description": "The CacheConfiguration Object to create Store Container."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Container.Ignite.setBackupsCount()", "Signature": "void setBackupsCount (Object cacheConfig, int backupsCount)", "Domain": "ACTION", "Description": "Sets the backups count for the specified CacheConfiguration.", "Parameters": [{"Name": "cacheConfig", "Type": "Object", "Description": "Ignite CacheConfiguration instance."}, {"Name": "backupsCount", "Type": "int", "Description": "Desired backups count."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Container.Ignite.lock()", "Signature": "boolean lock (String url, String containerName, String key, long timeout)", "Domain": "ACTION", "Description": "Acquires the lock.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Cache Name)"}, {"Name": "key", "Type": "String", "Description": "Key on which we need to take the lock"}, {"Name": "timeout", "Type": "long", "Description": "Lock timeout in miliseconds"}], "Returns": [{"Type": "boolean", "Description": "Returns true if grid acquires the lock"}], "Cautions": "none"},{"Function": "Store.Container.Ignite.setQueryEntity()", "Signature": "void setQueryEntity (Object cacheConfig, Object queryEntity)", "Domain": "ACTION", "Description": "Sets the QueryEntity for the specified CacheConfiguration.", "Parameters": [{"Name": "cacheConfig", "Type": "Object", "Description": "Ignite CacheConfiguration instance."}, {"Name": "queryEntity", "Type": "Object", "Description": "Ignite QueryEntity instance."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Container.Ignite.setTTL()", "Signature": "void setTTL (Object cacheConfig, long ttl)", "Domain": "ACTION", "Description": "Sets the TTL value (in seconds) for the specified CacheConfiguration.", "Parameters": [{"Name": "cacheConfig", "Type": "Object", "Description": "Ignite CacheConfiguration instance."}, {"Name": "ttl", "Type": "long", "Description": "TTL value (in seconds) after which entries from this container(cache) will be expired."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Transactions.commit()", "Signature": "void commit (String url)", "Domain": "ACTION", "Description": "Commits the current transaction. Current transaction covers all operations i.e. Store.open/put/get/delete between the first Store.Transactions.enableTransactions and Store.Transactions.commit/rollback or operations between subsequent Store.Transactions.commit/rollback calls.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Transactions.rollback()", "Signature": "void rollback (String url)", "Domain": "ACTION", "Description": "Roll's back the current transaction. Current transaction covers all operations Store.open/put/get/delete between the first Store.Transactions.enableTransactions and Store.Transactions.commit/rollback or operations between subsequent Store.Transactions.commit/rollback calls.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Transactions.disableTransactions()", "Signature": "void disableTransactions (String url)", "Domain": "ACTION", "Description": "Disables transactional behavior. All operations i.e. Store.Open/Put/Get/Delete post this call will be independent operations being applied immediately.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Transactions.enableTransactions()", "Signature": "void enableTransactions (String url)", "Domain": "ACTION", "Description": "Enables transactional behavior. By default transactions are disabled. All operations Store.Open/Put/Get/Delete, post this call will be executed under a transaction. The transaction will be applied once Store.Transactions.commit/rollback is executed, post which a new transaction begins.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.putAll()", "Signature": "void putAll (String url, Object[] putObjects)", "Domain": "ACTION", "Description": "Puts the items into the store. Need to make sure all containers for the associated item/entity are opened using Store.open api before putAll call. Make sure concept and container name should be same for putAll() Operation.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "putObjects", "Type": "Object[]", "Description": "Item or Entity(Concept/Event) object's (with key) to put into the store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.getLong()", "Signature": "long getLong (Object storeItem, String fieldName)", "Domain": "ACTION", "Description": "Returns long value of the specified field", "Parameters": [{"Name": "storeItem", "Type": "String", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be retrieved"}], "Returns": [{"Type": "long", "Description": "Returns long value of the specified field"}], "Cautions": "none"},{"Function": "Store.Item.update()", "Signature": "void update (String url, String containerName, Object updateObject)", "Domain": "ACTION", "Description": "Updates the given Item/Entity within the specified container(i.e.Table in ActiveSpaces or Name of the Ignite Cache). If transactional behavior is desired, call Store.Transactions.enableTransactions before opening the container and then perform put operation. Available only with ActiveSpaces 4.5.0 and above.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) where the item gets put"}, {"Name": "updateObject", "Type": "Object", "Description": "Item or Entity(Concept/Event) to update in the container"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.getDouble()", "Signature": "double getDouble (Object storeItem, String fieldName)", "Domain": "ACTION", "Description": "Returns double value of the specified field", "Parameters": [{"Name": "storeItem", "Type": "String", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be retrieved"}], "Returns": [{"Type": "double", "Description": "Returns double value of the specified field"}], "Cautions": "none"},{"Function": "Store.Item.getExpiration()", "Signature": "long getExpiration (Object storeItem)", "Domain": "ACTION", "Description": "Returns time left to expire (in seconds). If expired but not deleted, returns 0.", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}], "Returns": [{"Type": "long", "Description": "Returns time left to expire (in seconds). If expired but not deleted, returns 0."}], "Cautions": "none"},{"Function": "Store.Item.setLong()", "Signature": "void setLong (Object storeItem, String fieldName, long fieldValue)", "Domain": "ACTION", "Description": "Sets long value to the specified field", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be set"}, {"Name": "fieldValue", "Type": "long", "Description": "Field value"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.setInteger()", "Signature": "void setInteger (Object storeItem, String fieldName, int fieldValue)", "Domain": "ACTION", "Description": "Sets integer value to the specified field", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be set"}, {"Name": "fieldValue", "Type": "int", "Description": "Field value"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.create()", "Signature": "Object create (String url, String containerName)", "Domain": "ACTION", "Description": "Creates an empty Store Item object associated with the given Container. Container must be first opened. Ref: Store.open", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Container name"}], "Returns": [{"Type": "Object", "Description": "Returns newly created empty Store Item Object"}], "Cautions": "none"},{"Function": "Store.Item.getDateTime()", "Signature": "Object getDateTime (Object storeItem, String fieldName)", "Domain": "ACTION", "Description": "Returns datetime value of the specified field", "Parameters": [{"Name": "storeItem", "Type": "String", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be retrieved"}], "Returns": [{"Type": "DateTime", "Description": "Returns datetime value of the specified field"}], "Cautions": "none"},{"Function": "Store.Item.getAll()", "Signature": "Object[] getAll (String url, Object[] getObjects)", "Domain": "ACTION", "Description": "Gets the items from the store. Need to make sure all containers for the associated item/entity are opened using Store.open api before getAll call. Make sure concept and container name should be same for getAll() Operation.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "getObjects", "Type": "Object[]", "Description": "Item or Entity(Concept/Event) object's (with key) to get from the store"}], "Returns": [{"Type": "Object[]", "Description": "Item or Entity(Concept/Event) objects"}], "Cautions": "none"},{"Function": "Store.Item.setDouble()", "Signature": "void setDouble (Object storeItem, String fieldName, double fieldValue)", "Domain": "ACTION", "Description": "Sets double value to the specified field", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be set"}, {"Name": "fieldValue", "Type": "double", "Description": "Field value"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.getBoolean()", "Signature": "boolean getBoolean (Object storeItem, String fieldName)", "Domain": "ACTION", "Description": "Returns boolean value of the specified field", "Parameters": [{"Name": "storeItem", "Type": "String", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be retrieved"}], "Returns": [{"Type": "boolean", "Description": "Returns boolean value of the specified field"}], "Cautions": "none"},{"Function": "Store.Item.deleteAll()", "Signature": "void deleteAll (String url, Object[] deleteObjects)", "Domain": "ACTION", "Description": "Deletes the items from the store. Need to make sure all containers for the associated item/entity are opened using Store.open api before deleteAll call. Make sure concept and container name should be same for deleteAll() Operation.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "deleteObjects", "Type": "Object[]", "Description": "Item or Entity(Concept/Event) object's (with key) to delete from the store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.setBoolean()", "Signature": "void setBoolean (Object storeItem, String fieldName, boolean fieldValue)", "Domain": "ACTION", "Description": "Sets boolean value to the specified field", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be set"}, {"Name": "fieldValue", "Type": "boolean", "Description": "Field value"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.setString()", "Signature": "void setString (Object storeItem, String fieldName, String fieldValue)", "Domain": "ACTION", "Description": "Sets String value to the specified field", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be set"}, {"Name": "fieldValue", "Type": "String", "Description": "Field value"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.setBlob()", "Signature": "void setBlob (Object storeItem, String fieldName, Object fieldValue)", "Domain": "ACTION", "Description": "Sets blob value to the specified field", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be set"}, {"Name": "fieldValue", "Type": "Object", "Description": "Field value"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.setDateTime()", "Signature": "void setDateTime (Object storeItem, String fieldName, DateTime fieldValue)", "Domain": "ACTION", "Description": "Sets datetime value to the specified field", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be set"}, {"Name": "fieldValue", "Type": "DateTime", "Description": "Field value"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.query()", "Signature": "Object query (String url, String query, Object[] queryParameters, Object queryOptions, String returnEntityPath)", "Domain": "ACTION", "Description": "Returns an Iterator of Item/Entity objects from the Store that match the specified filter.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "query", "Type": "String", "Description": "Query that needs to be executed over the Store. Supports parameterized query i.e. select tid from t where age > ?."}, {"Name": "queryParameters", "Type": "Object[]", "Description": "Parameters applicable to the query."}, {"Name": "queryOptions", "Type": "Object", "Description": "If any, query options that govern the behavior of query execution. Refer to Store.QueryOptions.*"}, {"Name": "returnEntityPath", "Type": "String", "Description": "Return entity path. Only if the expected iterator element should be an Entity(Event/Concept), else should be null."}], "Returns": [{"Type": "Object", "Description": "Iterator of Item/Entity objects that match the filter"}], "Cautions": "none"},{"Function": "Store.Item.destroy()", "Signature": "void destroy (Object storeItem)", "Domain": "ACTION", "Description": "Destroy's the Store item object", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.clear()", "Signature": "void clear (Object storeItem)", "Domain": "ACTION", "Description": "Clears the existing data in the item so that new data can be added.", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.close()", "Signature": "void close (String url, String containerName)", "Domain": "ACTION", "Description": "Closes the container. No operation can be performed on this container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) after closing it.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Container Name(i.e. Table in ActiveSpaces or Name of the Ignite Cache)"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.getInteger()", "Signature": "int getInteger (Object storeItem, String fieldName)", "Domain": "ACTION", "Description": "Returns integer value of the specified field", "Parameters": [{"Name": "storeItem", "Type": "String", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be retrieved"}], "Returns": [{"Type": "int", "Description": "Returns int value of the specified field"}], "Cautions": "none"},{"Function": "Store.Item.closeQuery()", "Signature": "void closeQuery (Object queryIterator)", "Domain": "ACTION", "Description": "Closes the query and its dependent objects. Use this API only if you need to exit without or inbetween query result iteration. By default, on complete query result iteration query close happens implicitly, no need for explicit call to this API.", "Parameters": [{"Name": "queryIterator", "Type": "Object", "Description": "Iterator returned via the 'query' call"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.put()", "Signature": "void put (String url, String containerName, Object putObject)", "Domain": "ACTION", "Description": "Puts the given Item/Entity within the specified container(i.e.Table in ActiveSpaces or Name of the Ignite Cache). If transactional behavior is desired, call Store.Transactions.enableTransactions before opening the container and then perform put operation.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) where the item gets put"}, {"Name": "putObject", "Type": "Object", "Description": "Item or Entity(Concept/Event) to put in the container"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.getString()", "Signature": "String getString (Object storeItem, String fieldName)", "Domain": "ACTION", "Description": "Returns String value of the specified field", "Parameters": [{"Name": "storeItem", "Type": "String", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be retrieved"}], "Returns": [{"Type": "String", "Description": "Returns String value of the specified field"}], "Cautions": "none"},{"Function": "Store.Item.open()", "Signature": "void open (String url, String containerName)", "Domain": "ACTION", "Description": "Opens a container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) for operations(put/get/delete). If transactional behavior is desired, call Store.Transactions.enableTransactions before opening the container.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) Name"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.disconnect()", "Signature": "void disconnect (String url)", "Domain": "ACTION", "Description": "Disconnects from the Store. And closes all the associated connections.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.executeUpdate()", "Signature": "long executeUpdate (String url, String query)", "Domain": "ACTION", "Description": "Returns the number of store items effected based on the executeUpdate. Note - This api has a prerequisite of the tibdgadmin service running when store type is AS.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "query", "Type": "String", "Description": "Query that needs to be executed over the Store. Update supports Create/Drop Table/Index.Additionally Ignite supports Update/Delete/Insert/Alter query"}], "Returns": [{"Type": "long", "Description": "Number of store items effected by the update query"}], "Cautions": "none"},{"Function": "Store.Item.delete()", "Signature": "void delete (String url, String containerName, Object deleteObject)", "Domain": "ACTION", "Description": "Removes the given item from the specified container(i.e. Table in ActiveSpaces or Name of the Ignite Cache). If transactional behavior is desired, call Store.Transactions.enableTransactions before opening the container and then perform delete operation.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) from where the item is deleted"}, {"Name": "deleteObject", "Type": "Object", "Description": "Item object (with key) to remove from the container"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.connect()", "Signature": "void connect (Object storeConnectionInfo)", "Domain": "ACTION", "Description": "Connects to specified Store. All connections based on the pool size setting are connected", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection info details. Refer Store.ConnectionInfo.* for more details."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Item.get()", "Signature": "Object get (String url, String containerName, Object getObject)", "Domain": "ACTION", "Description": "Gets the item from the specified container(i.e. Table in ActiveSpaces or Name of the Ignite Cache).", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Name of the Container(i.e. Table in ActiveSpaces or Name of the Ignite Cache) from where the item is fetched"}, {"Name": "getObject", "Type": "Object", "Description": "Item or Entity(Concept/Event) object (with key) to get from the container"}], "Returns": [{"Type": "Object", "Description": "Item or Entity(Concept/Event)"}], "Cautions": "none"},{"Function": "Store.Item.getBlob()", "Signature": "Object getBlob (Object storeItem, String fieldName)", "Domain": "ACTION", "Description": "Returns blob value of the specified field", "Parameters": [{"Name": "storeItem", "Type": "String", "Description": "Store Item Object"}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field whose value needs to be retrieved"}], "Returns": [{"Type": "Object", "Description": "Returns blob value of the specified field"}], "Cautions": "none"},{"Function": "Store.Item.setTTL()", "Signature": "void setTTL (Object storeItem, long ttl)", "Domain": "ACTION", "Description": "Sets the TTL value (in seconds) for this item", "Parameters": [{"Name": "storeItem", "Type": "Object", "Description": "Store Item Object"}, {"Name": "ttl", "Type": "long", "Description": "TTL value (in seconds) after which this item will be available for expiration"}], "Returns": [{"Type": "void", "Description": "Sets the TTL value (in seconds) for this item before putting the item in the store"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.create()", "Signature": "Object create (String url, String type)", "Domain": "ACTION", "Description": "Creates a Store Connection Info object to initialize it with various Store specific connection configurations.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "type", "Type": "String", "Description": "Store Type (valid values - AS, Ignite)"}], "Returns": [{"Type": "Object", "Description": "Returns a Store ConnectionInfo Object"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.setName()", "Signature": "void setName (Object storeConnectionInfo, String name)", "Domain": "ACTION", "Description": "Sets the name of the store. For AS Store if using default grid name, pass null\\dont set a name at all. For Ignite Store it sets the ignite instance name.", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection Info object"}, {"Name": "name", "Type": "String", "Description": "Store Name"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.setConnectionTimeout()", "Signature": "void setConnectionTimeout (Object storeConnectionInfo, double connectionTimeout)", "Domain": "ACTION", "Description": "Sets the connection timeout for all calls from client to Store, except the initial connect call. Default is 5 seconds.", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection Info object"}, {"Name": "connectionTimeout", "Type": "double", "Description": "Connection timeout(seconds) for calls between client and Store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.setConnectionPoolSize()", "Signature": "void setConnectionPoolSize (Object storeConnectionInfo, int connectionPoolSize)", "Domain": "ACTION", "Description": "Sets the connection pool size.", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection Info object"}, {"Name": "connectionPoolSize", "Type": "int", "Description": "Connection pool size"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.Ignite.createTcpDiscoverySpi()", "Signature": "Object createTcpDiscoverySpi (Object tcpDiscoveryIpFinder)", "Domain": "ACTION", "Description": "Create a new TcpDiscoverySpi using the specified TcpDiscoveryIpFinder, and returns the newly created instance.", "Parameters": [{"Name": "tcpDiscoveryIpFinder", "Type": "Object", "Description": "TcpDiscoveryIpFinder Object"}], "Returns": [{"Type": "Object", "Description": "The created TcpDiscoverySpi intance."}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.Ignite.setConsistentId()", "Signature": "void setConsistentId (Object igniteConfig, String consistentId)", "Domain": "ACTION", "Description": "Sets the desired Consistent Id for the IgniteConfiguration.", "Parameters": [{"Name": "igniteConfig", "Type": "Object", "Description": "IgniteConfiguration instance."}, {"Name": "consistentId", "Type": "String", "Description": "Desired Consistent Id."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.Ignite.createTcpDiscoveryIpFinder()", "Signature": "Object createTcpDiscoveryIpFinder (String addresses)", "Domain": "ACTION", "Description": "Create a new TcpDiscoveryIpFinder with the specified addresses, and returns the newly created TcpDiscoveryIpFinder instance.", "Parameters": [{"Name": "addresses", "Type": "String", "Description": "Known nodes' IP/hostname along with port ranges. Eg. host1:47500..47503,host2:47500"}], "Returns": [{"Type": "TcpDiscoveryIpFinder", "Description": "The created TcpDiscoveryIpFinder instance."}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.Ignite.setIgniteConfig()", "Signature": "void setIgniteConfig (Object storeConnectionInfo, Object igniteConfig)", "Domain": "ACTION", "Description": "Sets IgniteConfiguration for the Store Connection Info", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection Info object"}, {"Name": "igniteConfig", "Type": "Object", "Description": "IgniteConfiguration Object"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.Ignite.setClientMode()", "Signature": "void setClientMode (Object igniteConfig, boolean clientMode)", "Domain": "ACTION", "Description": "Sets the ClientMode to true/false for the specified IgniteConfiguration.", "Parameters": [{"Name": "igniteConfig", "Type": "Object", "Description": "IgniteConfiguration instance."}, {"Name": "clientMode", "Type": "boolean", "Description": "Ignite Client Mode value to set."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.Ignite.setDiscoverySpi()", "Signature": "void setDiscoverySpi (Object igniteConfig, Object discoverySpi)", "Domain": "ACTION", "Description": "Sets the specified DiscoverySpi for the IgniteConfiguration.", "Parameters": [{"Name": "igniteConfig", "Type": "Object", "Description": "IgniteConfiguration instance"}, {"Name": "discoverySpi", "Type": "Object", "Description": "Ignite DiscoverySpi instance."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.Ignite.createIgniteConfig()", "Signature": "Object createIgniteConfig ()", "Domain": "ACTION", "Description": "Create a new IgniteConfiguration, and returns the newly created IgniteConfiguration instance.", "Parameters": "None.", "Returns": [{"Type": "IgniteConfiguration", "Description": "The created IgniteConfiguration instance."}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.AS.setBindStrategy()", "Signature": "void setBindStrategy (Object storeConnectionInfo, String secondaryServerUrl)", "Domain": "ACTION", "Description": "Sets the proxy bind strategy", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection Info object"}, {"Name": "strategy", "Type": "String", "Description": "RANDOM/NAMED/BALANCED"}, {"Name": "proxyNames", "Type": "String", "Description": "Pipe '|' delimited list of proxy names if the strategy is NAMED, else specific null."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.AS.setUserCredentials()", "Signature": "void setUserCredentials (Object storeConnectionInfo, String userName, String password)", "Domain": "ACTION", "Description": "Sets the user credentials if using a authenticated realm server.", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection Info object"}, {"Name": "userName", "Type": "String", "Description": "User name"}, {"Name": "password", "Type": "String", "Description": "User password"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.AS.setSecondaryStoreUrl()", "Signature": "void setSecondaryStoreUrl (Object storeConnectionInfo, String secondaryServerUrl)", "Domain": "ACTION", "Description": "Sets the secondary/backup store server url", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection Info object"}, {"Name": "secondaryServerUrl", "Type": "String", "Description": "Secondary/backup store server url"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.AS.setTrustFile()", "Signature": "void setTrustFile (Object storeConnectionInfo, String trustFilePath)", "Domain": "ACTION", "Description": "Sets the trust file. The client trusts the secure realm server based on this trust file.", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection Info object"}, {"Name": "trustFilePath", "Type": "String", "Description": "Trust file path"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.AS.setTrustAll()", "Signature": "void setTrustAll (Object storeConnectionInfo)", "Domain": "ACTION", "Description": "Sets the trust to all. The client trusts all realm servers.", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection Info object"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.ConnectionInfo.AS.setConnectionWaitTime()", "Signature": "void setConnectionWaitTime (Object storeConnectionInfo, double waitTime)", "Domain": "ACTION", "Description": "Sets the connection wait time for getting a response back from the proxy servers as part of the initial connect call to AS Store. Default is 0.1 seconds. Note - This time does not apply to the entire connect call, it just applies to the time to wait for responses from the proxy servers.", "Parameters": [{"Name": "storeConnectionInfo", "Type": "Object", "Description": "Store Connection Info object"}, {"Name": "waitTime", "Type": "double", "Description": "Connection timeout(seconds) during the initial connect call to AS Store"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.Metadata.getContainerNames()", "Signature": "String[] getContainerNames(String url)", "Domain": "ACTION", "Description": "Returns all the container names from the Store", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}], "Returns": [{"Type": "String[]", "Description": "Container names in the stores"}], "Cautions": "none"},{"Function": "Store.Metadata.getVersion()", "Signature": "String getVersion(String url)", "Domain": "ACTION", "Description": "Returns the current version of the Store", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}], "Returns": [{"Type": "String", "Description": "Current version of the Store"}], "Cautions": "none"},{"Function": "Store.Metadata.getContainerPrimaryIndex()", "Signature": "String getContainerPrimaryIndex(String url, String containerName)", "Domain": "ACTION", "Description": "Returns the primary index for the specified container", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Container Name"}], "Returns": [{"Type": "String", "Description": "Primary index of the container"}], "Cautions": "none"},{"Function": "Store.Metadata.getContainerIndexFieldNames()", "Signature": "String[] getContainerIndexFieldNames(String url, String containerName, String indexName)", "Domain": "ACTION", "Description": "Returns the list of fields associated to the specified index", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Container Name"}, {"Name": "indexName", "Type": "String", "Description": "Index Name"}], "Returns": [{"Type": "String[]", "Description": "List of fields associated to the index"}], "Cautions": "none"},{"Function": "Store.Metadata.getContainerFieldNames()", "Signature": "String[] getContainerFieldNames(String url, String containerName)", "Domain": "ACTION", "Description": "Returns the list of all field names within a given container", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Container Name"}], "Returns": [{"Type": "String[]", "Description": "List of Field Names"}], "Cautions": "none"},{"Function": "Store.Metadata.getContainerFieldType()", "Signature": "String getContainerFieldType(String url, String containerName, String fieldName)", "Domain": "ACTION", "Description": "Returns the data type of the specified field", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Container Name"}, {"Name": "fieldName", "Type": "String", "Description": "Field Name"}], "Returns": [{"Type": "String", "Description": "Field Type"}], "Cautions": "none"},{"Function": "Store.Metadata.getName()", "Signature": "String getName(String url)", "Domain": "ACTION", "Description": "Returns the Store name. For Ignite Store, it will return the name of ignite instance.", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}], "Returns": [{"Type": "String", "Description": "Store name"}], "Cautions": "none"},{"Function": "Store.Metadata.getContainerIndexNames()", "Signature": "String[] getContainerIndexNames(String url, String containerName)", "Domain": "ACTION", "Description": "Returns the list of index names on the specified container", "Parameters": [{"Name": "url", "Type": "String", "Description": "Url of the Store"}, {"Name": "containerName", "Type": "String", "Description": "Container Name"}], "Returns": [{"Type": "String[]", "Description": "List of indexes on the containers"}], "Cautions": "none"},{"Function": "Store.QueryOptions.create()", "Signature": "Object create (String storeType)", "Domain": "ACTION", "Description": "Creates a query options object specific to the Store to configure query execution properties.", "Parameters": [{"Name": "storeType", "Type": "String", "Description": "Store Type (valid values - AS/Ignite)"}], "Returns": [{"Type": "Object", "Description": "Returns a Query Options Object"}], "Cautions": "none"},{"Function": "Store.QueryOptions.setPrefetchSize()", "Signature": "void setPrefetchSize (Object queryOptions, long prefetchSize)", "Domain": "ACTION", "Description": "Sets the query prefetch size.", "Parameters": [{"Name": "queryOptions", "Type": "Object", "Description": "Query option object"}, {"Name": "prefetchSize", "Type": "long", "Description": "Query prefetch size."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.QueryOptions.setReuse()", "Signature": "void setReuse (Object queryOptions, boolean reuse)", "Domain": "ACTION", "Description": "Sets the query to be cached for reuse during subsequent calls.The caching is restricted to the containing transacted/nontransacted session. Will not be available across transactions.", "Parameters": [{"Name": "queryOptions", "Type": "Object", "Description": "Query option object"}, {"Name": "reuse", "Type": "boolean", "Description": "Sets the query to be cached for reuse"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.QueryOptions.Ignite.setCollocated()", "Signature": "void setCollocated (Object queryOptions,boolean isCollocated)", "Domain": "ACTION", "Description": "Sets the query collocated or not.", "Parameters": [{"Name": "queryOptions", "Type": "Object", "Description": "Query option object"}, {"Name": "isCollocated", "Type": "boolean", "Description": "Flag used to indicate query is collocated or not."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.QueryOptions.Ignite.setTimeout()", "Signature": "void setTimeout (Object queryOptions,int timeout)", "Domain": "ACTION", "Description": "Sets the query execution timeout. Query will be automatically cancelled if the execution timeout is exceeded.", "Parameters": [{"Name": "queryOptions", "Type": "Object", "Description": "Query option object"}, {"Name": "timeout", "Type": "int", "Description": "Timeout value in milliseconds. Zero value disables timeout."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.QueryOptions.Ignite.setLocal()", "Signature": "void setLocal (Object queryOptions,boolean isLocal)", "Domain": "ACTION", "Description": "Sets the flag to execute the query on local node only or not.", "Parameters": [{"Name": "queryOptions", "Type": "Object", "Description": "Query option object"}, {"Name": "isLocal", "Type": "boolean", "Description": "Flag used to indicate query to be executed on local node or not."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.QueryOptions.AS.setLocalSnapshotConsistency()", "Signature": "void setLocalSnapshotConsistency (Object queryOptions)", "Domain": "ACTION", "Description": "Sets snapshot consistency to local, i.e. snapshot taken at each node independently. Even though global coordination across all nodes is not needed here, this could cause partially committed transaction show up in the results.", "Parameters": [{"Name": "queryOptions", "Type": "Object", "Description": "Query option object"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Store.QueryOptions.AS.setGlobalSnapshotConsistency()", "Signature": "void setGlobalSnapshotConsistency (Object queryOptions)", "Domain": "ACTION", "Description": "Sets snapshot consistency to global. A global snapshot will ensure no partially committed transactions spanning multiple nodes are observed in the query results. However there is cost involved in coordinating across all nodes.", "Parameters": [{"Name": "queryOptions", "Type": "Object", "Description": "Query option object"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.exists()", "Signature": "boolean exists(String name)", "Domain": "ACTION, CONDITION", "Description": "Checks if a query exists.", "Parameters": [{"Name": "name", "Type": "String", "Description": "name of the query."}], "Returns": [{"Type": "boolean", "Description": "true if and only if the query exists."}], "Cautions": "none"},{"Function": "Query.create()", "Signature": "void create(String name, String query)", "Domain": "ACTION", "Description": "Creates a query and registers it under the given name.", "Parameters": [{"Name": "name", "Type": "String", "Description": "name of the query."}, {"Name": "query", "Type": "String", "Description": "text of the query."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.delete()", "Signature": "void delete(String name)", "Domain": "ACTION", "Description": "Deletes a query.", "Parameters": [{"Name": "name", "Type": "String", "Description": "name of the query."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.groupMinList()", "Signature": "Object groupMinList(String resultSetName, String entityUri, String fieldName, String filter, String... groupByFieldNames)", "Domain": "QUERY, ACTION", "Description": "Find the minimum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter for each group.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for finding the minimum value."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}, {"Name": "groupByFieldNames", "Type": "String...", "Description": "Names of the fields in groupBy clause."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column or an Object[] of columns."}], "Cautions": "none", "Example": "String resultSetName = \"groupMinListRS\" ;\nObject resultSet = Query.Datagrid.Aggregate.groupMinList(resultSetName, \"/Concepts/Employee\",\"exp\",\"age < 4\", \"age\", \"dept\");\n//Iterate over the result set\nwhile(Query.Util.sizeOfList(resultList) > 0){\nObject[] s = Query.Util.removeFromList(resultList, 0);\n/* s[0]-- age, s[1]-- exp, s[2]-- minimum exp from the employee entities\nsatisfying the filter condition for this age and exp */\nSystem.debugOut(resultSetName + \" :: \" + s[0] + \" : \"+ s[1] + \" : \"+ s[2]);\n}"},{"Function": "Query.Datagrid.Aggregate.groupSumList()", "Signature": "Object groupSumList(String resultSetName, String entityUri, String fieldName, String filter, String... groupByFieldNames)", "Domain": "QUERY, ACTION", "Description": "Find the sum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter for each group.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}, {"Name": "groupByFieldNames", "Type": "String...", "Description": "Names of the fields in groupBy clause."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column or an Object[] of columns."}], "Cautions": "none", "Example": "String resultSetName = \"groupSumListRS\" ;\nObject resultSet = Query.Datagrid.Aggregate.groupSumList(resultSetName, \"/Concepts/Employee\",\"exp\",\"age < 4\", \"age\", \"dept\");\n//Iterate over the result set\nwhile(Query.Util.sizeOfList(resultList) > 0){\nObject[] s = Query.Util.removeFromList(resultList, 0);\n/* s[0]-- age, s[1]-- exp, s[2]-- sum of exp of the employee entities\nsatisfying the filter condition for this age and exp */\nSystem.debugOut(resultSetName + \" :: \" + s[0] + \" : \"+ s[1] + \" : \"+ s[2]);\n}"},{"Function": "Query.Datagrid.Aggregate.filterMax()", "Signature": "void filterMax(String resultSetName, String entityUri, String fieldName, String filter)", "Domain": "QUERY, ACTION", "Description": "Find the maximum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for finding the minimum value."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.avg()", "Signature": "void avg(String resultSetName, String entityUri, String fieldName)", "Domain": "QUERY, ACTION", "Description": "Find the average of the entities from the field specified by field name, of the specified URI.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.filterMin()", "Signature": "void filterMin(String resultSetName, String entityUri, String fieldName, String filter)", "Domain": "QUERY, ACTION", "Description": "Find the minimum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.countList()", "Signature": "Object countList(String resultSetName, String entityUri)", "Domain": "QUERY, ACTION", "Description": "Count the number of entities of the URI specified.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column."}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.groupMax()", "Signature": "void groupMax(String resultSetName, String entityUri, String fieldName, String filter, String... groupByFieldNames)", "Domain": "QUERY, ACTION", "Description": "Find the maximum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter for each group.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}, {"Name": "groupByFieldNames", "Type": "String...", "Description": "Names of the fields in groupBy clause."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.filterCount()", "Signature": "void filterCount(String resultSetName,String entityUri, String filter)", "Domain": "QUERY, ACTION", "Description": "Count the number of entities of the specified URI, which satisfies the condition in the filter.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}], "Returns": [{"Type": "Object"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.count()", "Signature": "void count(String resultSetName, String entityUri)", "Domain": "QUERY, ACTION", "Description": "Count the number of entities of the URI specified.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.groupMaxList()", "Signature": "Object groupMaxList(String resultSetName, String entityUri, String fieldName, String filter, String... groupByFieldNames)", "Domain": "QUERY, ACTION", "Description": "Find the maximum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter for each group.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}, {"Name": "groupByFieldNames", "Type": "String...", "Description": "Names of the fields in groupBy clause."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column or an Object[] of columns."}], "Cautions": "none", "Example": "String resultSetName = \"groupMaxListRS\" ;\nObject resultSet = Query.Datagrid.Aggregate.groupMaxList(resultSetName, \"/Concepts/Employee\",\"exp\",\"age < 4\", \"age\", \"dept\");\n//Iterate over the result set\nwhile(Query.Util.sizeOfList(resultList) > 0){\nObject[] s = Query.Util.removeFromList(resultList, 0);\n/* s[0]-- age, s[1]-- exp, s[2]-- maximum exp from the employee entities\nsatisfying the filter condition for this age and exp */\nSystem.debugOut(resultSetName + \" :: \" + s[0] + \" : \"+ s[1] + \" : \"+ s[2]);\n}"},{"Function": "Query.Datagrid.Aggregate.groupAvgList()", "Signature": "Object groupAvgList(String resultSetName, String entityUri, String fieldName, String filter, String... groupByFieldNames)", "Domain": "QUERY, ACTION", "Description": "Find the average of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter for each group.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}, {"Name": "groupByFieldNames", "Type": "String...", "Description": "Names of the fields in groupBy clause."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column or an Object[] of columns."}], "Cautions": "none", "Example": "String resultSetName = \"groupAvgListRS\" ;\nObject resultSet = Query.Datagrid.Aggregate.groupAvgList(resultSetName, \"/Concepts/Employee\",\"exp\",\"age < 4\", \"age\", \"dept\");\n//Iterate over the result set\nwhile(Query.Util.sizeOfList(resultList) > 0){\nObject[] s = Query.Util.removeFromList(resultList, 0);\n/* s[0]-- age, s[1]-- exp, s[2]-- average exp of the employee entities\nsatisfying the filter condition for this age and exp */\nSystem.debugOut(resultSetName + \" :: \" + s[0] + \" : \"+ s[1] + \" : \"+ s[2]);\n}"},{"Function": "Query.Datagrid.Aggregate.sum()", "Signature": "void sum(String resultSetName, String entityUri, String fieldName)", "Domain": "QUERY, ACTION", "Description": "Find the sum of the entities from the field specified by field name, of the specified URI.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.groupMin()", "Signature": "void groupMin(String resultSetName, String entityUri, String fieldName, String filter, String... groupByFieldNames)", "Domain": "QUERY, ACTION", "Description": "Find the minimum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter for each group.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for finding the minimum value."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}, {"Name": "groupByFieldNames", "Type": "String...", "Description": "Names of the fields in groupBy clause."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.groupCountList()", "Signature": "Object groupCountList(String resultSetName, String entityUri, String filter, String... groupByFieldNames)", "Domain": "QUERY, ACTION", "Description": "Count the number of entities of the specified URI, which satisfies the condition in the filter for each group.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}, {"Name": "groupByFieldNames", "Type": "String...", "Description": "Names of the fields in groupBy clause."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column or an Object[] of columns."}], "Cautions": "none", "Example": "String resultSetName = \"groupCountListRS\" ;\nObject resultSet = Query.Datagrid.Aggregate.groupCountList(resultSetName, \"/Concepts/Employee\",\"age < 4\", \"age\", \"exp\");\n//Iterate over the result set\nwhile(Query.Util.sizeOfList(resultList) > 0){\nObject[] s = Query.Util.removeFromList(resultList, 0);\n/* s[0]-- age, s[1]-- exp, s[2]-- count of the employee entities\nsatisfying the filter condition for this age and exp */\nSystem.debugOut(resultSetName + \" :: \" + s[0] + \" : \"+ s[1] + \" : \"+ s[2]);\n}"},{"Function": "Query.Datagrid.Aggregate.filterCountList()", "Signature": "Object filterCountList(String resultSetName,String entityUri, String filter)", "Domain": "QUERY, ACTION", "Description": "Count the number of entities of the specified URI, which satisfies the condition in the filter.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column."}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.groupCount()", "Signature": "void groupCount(String resultSetName, String entityUri, String filter, String... groupByFieldNames)", "Domain": "QUERY, ACTION", "Description": "Count the number of entities of the specified URI, which satisfies the condition in the filter for each group.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}, {"Name": "groupByFieldNames", "Type": "String...", "Description": "Names of the fields in groupBy clause."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.filterSumList()", "Signature": "Object filterSumList(String resultSetName, String entityUri, String fieldName, String filter)", "Domain": "QUERY, ACTION", "Description": "Find the sum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column."}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.filterMinList()", "Signature": "Object filterMinList(String resultSetName, String entityUri, String fieldName, String filter)", "Domain": "QUERY, ACTION", "Description": "Find the minimum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column."}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.max()", "Signature": "void max(String resultSetName, String entityUri, String fieldName)", "Domain": "QUERY, ACTION", "Description": "Find the maximum of the entities from the field specified by field name, of the specified URI.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.filterAvg()", "Signature": "void filterAvg(String resultSetName, String entityUri, String fieldName, String filter)", "Domain": "QUERY, ACTION", "Description": "Find the average of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.min()", "Signature": "void min(String resultSetName, String entityUri, String fieldName)", "Domain": "QUERY, ACTION", "Description": "Find the minimum of the entities from the field specified by field name, of the specified URI.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.groupSum()", "Signature": "void groupSum(String resultSetName, String entityUri, String fieldName, String filter, String... groupByFieldNames)", "Domain": "QUERY, ACTION", "Description": "Find the sum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter for each group.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}, {"Name": "groupByFieldNames", "Type": "String...", "Description": "Names of the fields in groupBy clause."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.avgList()", "Signature": "Object avgList(String resultSetName, String entityUri, String fieldName)", "Domain": "QUERY, ACTION", "Description": "Find the average of the entities from the field specified by field name, of the specified URI.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column."}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.maxList()", "Signature": "Object maxList(String resultSetName, String entityUri, String fieldName)", "Domain": "QUERY, ACTION", "Description": "Find the maximum of the entities from the field specified by field name, of the specified URI.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column."}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.sumList()", "Signature": "Object sumList(String resultSetName, String entityUri, String fieldName)", "Domain": "QUERY, ACTION", "Description": "Find the sum of the entities from the field specified by field name, of the specified URI.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column."}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.minList()", "Signature": "Object minList(String resultSetName, String entityUri, String fieldName)", "Domain": "QUERY, ACTION", "Description": "Find the minimum of the entities from the field specified by field name, of the specified URI.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column."}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.filterAvgList()", "Signature": "Object filterAvgList(String resultSetName, String entityUri, String fieldName, String filter)", "Domain": "QUERY, ACTION", "Description": "Find the average of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column."}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.filterSum()", "Signature": "void filterSum(String resultSetName, String entityUri, String fieldName, String filter)", "Domain": "QUERY, ACTION", "Description": "Find the sum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.groupAvg()", "Signature": "void groupAvg(String resultSetName, String entityUri, String fieldName, String filter, String... groupByFieldNames)", "Domain": "QUERY, ACTION", "Description": "Find the average of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter for each group.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for computation."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}, {"Name": "groupByFieldNames", "Type": "String...", "Description": "Names of the fields in groupBy clause."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Datagrid.Aggregate.filterMaxList()", "Signature": "Object filterMaxList(String resultSetName, String entityUri, String fieldName, String filter)", "Domain": "QUERY, ACTION", "Description": "Find the maximum of the entities from the field specified by field name, of the specified URI, which satisfies the condition in the filter.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "The resultset name"}, {"Name": "entityUri", "Type": "String", "Description": "The entity uri."}, {"Name": "fieldName", "Type": "String", "Description": "Name of the field used for finding the minimum value."}, {"Name": "filter", "Type": "String", "Description": "Condition to be satisfied by the entities in the result."}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column."}], "Cautions": "none"},{"Function": "Query.ResultSet.isOpen()", "Signature": "boolean isOpen(String resultSetName)", "Domain": "ACTION, CONDITION", "Description": "Checks if the result with the given name is open.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "name of the result set."}], "Returns": [{"Type": "boolean", "Description": "true if a result set by that name is open."}], "Cautions": "none"},{"Function": "Query.ResultSet.getRowCountIfPossible()", "Signature": "int getRowCountIfPossible(String resultsetName)", "Domain": "ACTION", "Description": "The number of rows/results that were retrieved by the query.", "Parameters": [{"Name": "resultsetName", "Type": "String", "Description": "name of the result set."}], "Returns": [{"Type": "int"}], "Cautions": "none"},{"Function": "Query.ResultSet.next()", "Signature": "boolean next(String resultsetName)", "Domain": "ACTION", "Description": "false", "Parameters": [{"Name": "resultsetName", "Type": "String", "Description": "name of the statement currently executed."}], "Returns": [{"Type": "boolean", "Description": "false if and only if the query has no more row."}], "Cautions": "none"},{"Function": "Query.ResultSet.close()", "Signature": "void close(String resultsetName)", "Domain": "ACTION", "Description": "Closes a result set.", "Parameters": [{"Name": "resultsetName", "Type": "String", "Description": "name of the result set."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.ResultSet.isBatchEnd()", "Signature": "boolean isBatchEnd(String resultsetName)", "Domain": "ACTION, CONDITION", "Description": "true", "Parameters": [{"Name": "resultsetName", "Type": "String", "Description": "name of the result set."}], "Returns": [{"Type": "boolean", "Description": "true"}], "Cautions": "none"},{"Function": "Query.ResultSet.findColumn()", "Signature": "String findColumn(String statementName, String columnName)", "Domain": "ACTION, CONDITION", "Description": "Finds by name the index of a column in the result set.", "Parameters": [{"Name": "resultsetName", "Type": "String", "Description": "name of the result set."}, {"Name": "columnName", "Type": "String", "Description": "name of a column in the result set of the statement."}], "Returns": [{"Type": "int", "Description": "index of that column or -1 if the column was not found."}], "Cautions": "none"},{"Function": "Query.ResultSet.get()", "Signature": "Object get(String resultsetName, int index)", "Domain": "ACTION", "Description": "Gets the value of the column at the given index.", "Parameters": [{"Name": "resultsetName", "Type": "String", "Description": "name of the result set."}, {"Name": "index", "Type": "int", "Description": "index of the column."}], "Returns": [{"Type": "Object", "Description": "The value of the column at the given index."}], "Cautions": "none"},{"Function": "Query.ResultSet.Metadata.getColumnName()", "Signature": "String getColumnName(String resultSetName, int columnIndex)", "Domain": "ACTION, CONDITION", "Description": "Gets the name of a column in the result set.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "name of the result set."}, {"Name": "columnIndex", "Type": "int", "Description": "index of a column in the result set."}], "Returns": [{"Type": "String", "Description": "name of that column or null if the column was not found."}], "Cautions": "none"},{"Function": "Query.ResultSet.Metadata.getStatementName()", "Signature": "String getStatementName(String resultsetName)", "Domain": "ACTION, CONDITION", "Description": "Gets the name of the statement that owns the result set.", "Parameters": [{"Name": "resultsetName", "Type": "String", "Description": "name of the result set."}], "Returns": [{"Type": "String", "Description": "name of the statement that owns the result set."}], "Cautions": "none"},{"Function": "Query.ResultSet.Metadata.getQueryName()", "Signature": "String getQueryName(String resultSetName)", "Domain": "ACTION, CONDITION", "Description": "Gets the name of the query used to build the statement that owns the result set.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "name of the result set."}], "Returns": [{"Type": "String", "Description": "name of the query used to build the statement that owns the result set."}], "Cautions": "none"},{"Function": "Query.ResultSet.Metadata.getColumnCount()", "Signature": "int getColumnCount(String resultSetName)", "Domain": "ACTION, CONDITION", "Description": "Gets the number of columns in the result set.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "name of the result set."}], "Returns": [{"Type": "int", "Description": "number of columns in the result set."}], "Cautions": "none"},{"Function": "Query.ResultSet.Metadata.getColumnType()", "Signature": "String getColumnType(String resultSetName, int columnIndex)", "Domain": "ACTION, CONDITION", "Description": "Gets the type of a column in the result set.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "name of the result set."}, {"Name": "columnIndex", "Type": "int", "Description": "index of a column in the result set."}], "Returns": [{"Type": "String", "Description": "name of the type of a column or null if the column was not found."}], "Cautions": "none"},{"Function": "Query.ResultSet.Metadata.findColumn()", "Signature": "int findColumn(String resultSetName, String columnName)", "Domain": "ACTION, CONDITION", "Description": "Finds the index of a column in the result set.", "Parameters": [{"Name": "resultSetName", "Type": "String", "Description": "name of the result set."}, {"Name": "columnName", "Type": "String", "Description": "name of a column in the result of the query."}], "Returns": [{"Type": "int", "Description": "index of that column or -1 if the column was not found."}], "Cautions": "none"},{"Function": "Query.Util.invokeFunctionInQuerySession()", "Signature": "Object invokeFunctionInQuerySession(String querySessionName, String queryRuleFunctionUri, Object[] parameters)", "Domain": "ACTION", "Description": "Invokes a rule function in another query session/agent whose name is given along with the parameters.", "Parameters": [{"Name": "querySessionName", "Type": "String", "Description": "A valid query session/agent name that has been deployed in the same processing unit."}, {"Name": "queryRuleFunctionUri", "Type": "String", "Description": "parameters."}, {"Name": "parameters", "Type": "Object[]", "Description": "Parameters to the rule function."}], "Returns": [{"Type": "Object"}], "Cautions": "none"},{"Function": "Query.Util.getDynamicQuerySessionName()", "Signature": "String getDynamicQuerySessionName()", "Domain": "ACTION, CONDITION", "Description": "Returns the name of the collocated query agent that can be started dynamically. This method does not require the\nsession to be running.", "Parameters": "None.", "Returns": [{"Type": "String", "Description": "The name of the dynamic query session (Fixed)."}], "Cautions": "none"},{"Function": "Query.Util.addToList()", "Signature": "int addToList(Object list, Object item)", "Domain": "ACTION", "Description": "Adds the given item into the list.", "Parameters": [{"Name": "list", "Type": "java.util.List", "Description": "The list to add the item to."}, {"Name": "item", "Type": "Object", "Description": "The item to be added to the list."}], "Returns": [{"Type": "int", "Description": "The new size of the list after the addition."}], "Cautions": "none"},{"Function": "Query.Util.newList()", "Signature": "Object newList()", "Domain": "ACTION", "Description": "Creates a new List.", "Parameters": "None.", "Returns": [{"Type": "Object(java.util.List)", "Description": "A new List instance."}], "Cautions": "none"},{"Function": "Query.Util.clearList()", "Signature": "void clearList(Object list)", "Domain": "ACTION", "Description": "Removes all the elements in the list.", "Parameters": [{"Name": "list", "Type": "java.util.List", "Description": "The list to be cleared."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Util.listToArray()", "Signature": "Object[] listToArray(Object list)", "Domain": "ACTION", "Description": "Copies the list contents by reference to a new array.", "Parameters": [{"Name": "list", "Type": "java.util.List", "Description": "The list whose elements are to be copied (references only) to a new java.lang.Object array."}], "Returns": [{"Type": "Object[]", "Description": "The elements of the list in a new array."}], "Cautions": "none"},{"Function": "Query.Util.newArray()", "Signature": "Object[] newArray(int length)", "Domain": "ACTION", "Description": "Creates an Object array.", "Parameters": [{"Name": "length", "Type": "int", "Description": "The length of the Object array to be created."}], "Returns": [{"Type": "Object[]", "Description": "The java.lang.Object array."}], "Cautions": "none"},{"Function": "Query.Util.executeInDynamicQuerySession()", "Signature": "Object executeInDynamicQuerySession(String sqlString, Object mapOfParameters, boolean reuse, long... timeout)", "Domain": "ACTION", "Description": "Executes the sql string in the collocated, dynamic query session. Obviously the session should've been started\nbeforehand.", "Parameters": [{"Name": "sqlString", "Type": "String", "Description": "A valid snapshot query sql string."}, {"Name": "mapOfParameters", "Type": "Object", "Description": "types. Or, null if there are no bind parameters."}, {"Name": "reuse", "Type": "boolean", "Description": "string is automatically registered the first time (Query.Create(sql))."}, {"Name": "timeout", "Type": "Long", "Description": "Optional Timeout value in milliseconds; default is no timeout(-1)"}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column or an an Object[] of columns."}], "Cautions": "none"},{"Function": "Query.Util.removeFromList()", "Signature": "Object removeFromList(Object list, int index)", "Domain": "ACTION", "Description": "Removes the element at the given position in the list.", "Parameters": [{"Name": "list", "Type": "java.util.List", "Description": "The list from which the item at the position/index number will be removed."}, {"Name": "index", "Type": "int", "Description": "The position number from which the item will be removed."}], "Returns": [{"Type": "Object", "Description": "the item that was removed."}], "Cautions": "none"},{"Function": "Query.Util.sizeOfList()", "Signature": "int sizeOfList(Object list)", "Domain": "ACTION, CONDITION", "Description": "Returns the size/length of the given list.", "Parameters": [{"Name": "list", "Type": "java.util.List", "Description": "The list whose size/length is to be retrieved."}], "Returns": [{"Type": "int", "Description": "The size of the list."}], "Cautions": "none"},{"Function": "Query.Util.startDynamicQuerySession()", "Signature": "void startDynamicQuerySession()", "Domain": "ACTION", "Description": "Starts a collocated query session, dynamically. The name is always fixed. Only 1 such session can be started per\nJVM.", "Parameters": "None.", "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Util.executeInQuerySession()", "Signature": "Object executeInQuerySession(String querySessionName, String sqlString, Object mapOfParameters, boolean reuse, long... timeout)", "Domain": "ACTION", "Description": "Executes the sql string synchronously in a collocated query agent and returns the results.", "Parameters": [{"Name": "querySessionName", "Type": "String", "Description": "A valid query session/agent name that has been deployed in the same processing unit."}, {"Name": "sqlString", "Type": "String", "Description": "A valid snapshot query sql string."}, {"Name": "mapOfParameters", "Type": "Object", "Description": "types. Or, null if there are no bind parameters."}, {"Name": "reuse", "Type": "boolean", "Description": "string is automatically registered the first time (Query.Create(sql))."}, {"Name": "timeout", "Type": "Long", "Description": "Optional Timeout value in milliseconds; default is no timeout(-1)"}], "Returns": [{"Type": "Object", "Description": "Return a List of rows. Each row may be a single Object column or an an Object[] of columns."}], "Cautions": "none"},{"Function": "Query.Statement.isOpen()", "Signature": "boolean isOpen(String statementName)", "Domain": "ACTION, CONDITION", "Description": "Checks if a statement is open.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}], "Returns": [{"Type": "boolean", "Description": "true if and only if the statement is open."}], "Cautions": "none"},{"Function": "Query.Statement.getVar()", "Signature": "Object getVar(String statementName, String bindVarName)", "Domain": "ACTION, CONDITION", "Description": "Gets the value of a bind variable in a statement.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}, {"Name": "bindVarName", "Type": "String", "Description": "name of a bind variable in the statement."}], "Returns": [{"Type": "Object", "Description": "value of the bind variable in the statement."}], "Cautions": "none"},{"Function": "Query.Statement.executeWithBatchCallback()", "Signature": "void executeWithBatchCallback(String statementName, String listenerName, String callbackUri, boolean isContinuous, Object closure)", "Domain": "ACTION", "Description": "Executes a query and binds a callback rule function to it.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement to execute."}, {"Name": "listenerName", "Type": "String", "Description": "name of the listener to create."}, {"Name": "callbackUri", "Type": "String"}, {"Name": "isContinuous", "Type": "boolean", "Description": "true for the statement to be executed in continuous mode."}, {"Name": "closure", "Type": "Object", "Description": "that will be blindly returned through a callback parameter."}], "Returns": [{"Type": "void"}], "Cautions": "Since the entire set of rows from a batch accumulate until the end of the batch, this method is not suitable for batches that produce\na large number of rows in each batch."},{"Function": "Query.Statement.setSnapshotRequired()", "Signature": "void setSnapshotRequired(String statementName, String alias, boolean isRequired,boolean ... loadAllEntities)", "Domain": "ACTION", "Description": "Requests that a snapshot be made, or not, for an item in the FROM, at execution time,\nfor continuous queries. This is not used when executing non-continuous queries.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}, {"Name": "alias", "Type": "String", "Description": "alias of a item in the FROM of the statement."}, {"Name": "isRequired", "Type": "boolean", "Description": "true if and only if a snapshot is required for the aliased item."}, {"Name": "loadAllEntities", "Type": "boolean", "Description": "true if and only if load all entities required for the aliased item."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Statement.setVar()", "Signature": "void setVar(String statementName, String bindvarName, Object value)", "Domain": "ACTION", "Description": "Sets the value of a bind variable in a statement.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}, {"Name": "bindVarName", "Type": "name", "Description": "of a bind variable in the statement."}, {"Name": "value", "Type": "Object", "Description": "value to bind to the given bind variable name."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Statement.executeWithCallback()", "Signature": "void executeWithCallback(String statementName, String listenerName, String callbackUri, boolean isContinuous, Object closure)", "Domain": "ACTION", "Description": "Executes a query and binds a callback rule function to it.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement to execute."}, {"Name": "listenerName", "Type": "String", "Description": "name of the listener to create."}, {"Name": "callbackUri", "Type": "String"}, {"Name": "isContinuous", "Type": "boolean", "Description": "true for the statement to be executed in continuous mode."}, {"Name": "closure", "Type": "Object", "Description": "that will be blindly returned through a callback parameter."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Statement.execute()", "Signature": "void execute(String statementName, String resultsetName)", "Domain": "ACTION", "Description": "Executes a statement and binds a result set to it.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement to execute."}, {"Name": "resultsetName", "Type": "String", "Description": "name of the result set produced by the execution."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Statement.assertEvent()", "Signature": "void assertEvent(String statementName, Event event)", "Domain": "ACTION", "Description": "Sends the event directly to all query instances registered under the given statement name.", "Parameters": [{"Name": "statementName", "Type": "The", "Description": "query instances registered under the name to which the event must be sent."}], "Returns": [{"Type": "void"}], "See Also": "Event.assertEvent(event)"},{"Function": "Query.Statement.clearVars()", "Signature": "void clearVars(String statementName)", "Domain": "ACTION", "Description": "Clears the values of all the bind variables associated to the statement.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Statement.close()", "Signature": "void close(String statementName)", "Domain": "ACTION", "Description": "Closes the statement and all its resultsets.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Statement.open()", "Signature": "void open(String queryName, String statementName)", "Domain": "ACTION", "Description": "Opens a statement using a registered query name.", "Parameters": [{"Name": "queryName", "Type": "String", "Description": "name of the query that the statement will use."}, {"Name": "statementName", "Type": "String", "Description": "name given to the statement."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Statement.clearSnapshotRequired()", "Signature": "void clearSnapshotRequired(String statementName)", "Domain": "ACTION", "Description": "Clears all the requests for snapshots associated to the statement.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Statement.getSnapshotRequired()", "Signature": "boolean getSnapshotRequired(String statementName, String alias)", "Domain": "ACTION", "Description": "Checks if the statement will make a snapshot, or not, for an item in the FROM, at execution time,\nfor continuous queries.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}, {"Name": "alias", "Type": "String", "Description": "alias of a item in the FROM of the statement."}], "Returns": [{"Type": "true", "Description": "if and only if the statement will make a snapshot, or not, for an item in the FROM, at execution time."}], "Cautions": "none"},{"Function": "Query.Statement.Metadata.getColumnName()", "Signature": "String getColumnName(String statementName, int columnIndex)", "Domain": "ACTION, CONDITION", "Description": "Gets the name of a column in the result of the statement.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}, {"Name": "columnIndex", "Type": "int", "Description": "index of a column in the result of the statement."}], "Returns": [{"Type": "String", "Description": "name of that column or null if the column was not found."}], "Cautions": "none"},{"Function": "Query.Statement.Metadata.getQueryName()", "Signature": "String getQueryName(String statementName)", "Domain": "ACTION, CONDITION", "Description": "Gets the name of the query that owns the statement.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}], "Returns": [{"Type": "String", "Description": "name of the query that owns the statement."}], "Cautions": "none"},{"Function": "Query.Statement.Metadata.getColumnCount()", "Signature": "int getColumnCount(String statementName)", "Domain": "ACTION, CONDITION", "Description": "Gets the number of columns in the result of the statement.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}], "Returns": [{"Type": "int", "Description": "number of columns in the result of the statement."}], "Cautions": "none"},{"Function": "Query.Statement.Metadata.getColumnType()", "Signature": "String getColumnType(String statementName, int columnIndex)", "Domain": "ACTION, CONDITION", "Description": "Gets the type of a column in the statement.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}, {"Name": "columnIndex", "Type": "int", "Description": "index of a column in the statement."}], "Returns": [{"Type": "String", "Description": "name of the type of a column or null if the column was not found."}], "Cautions": "none"},{"Function": "Query.Statement.Metadata.findColumn()", "Signature": "int findColumn(String statementName, String columnName)", "Domain": "ACTION, CONDITION", "Description": "Finds the index of a column in the result of the statement.", "Parameters": [{"Name": "statementName", "Type": "String", "Description": "name of the statement."}, {"Name": "columnName", "Type": "String", "Description": "name of a column in the result of the statement."}], "Returns": [{"Type": "int", "Description": "index of that column or -1 if the column was not found."}], "Cautions": "none"},{"Function": "Query.Callback.exists()", "Signature": "boolean exists(String listenerName)", "Domain": "ACTION, CONDITION", "Description": "Checks if a listener with the given name exists.", "Parameters": [{"Name": "listenerName", "Type": "String", "Description": "name of the listener."}], "Returns": [{"Type": "boolean", "Description": "true if a listener by that name exists."}], "Cautions": "none"},{"Function": "Query.Callback.delete()", "Signature": "void delete(String listenerName)", "Domain": "ACTION", "Description": "Deletes the listener.", "Parameters": [{"Name": "listenerName", "Type": "String", "Description": "name of the listener."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Query.Callback.Metadata.getColumnName()", "Signature": "String getColumnName(String listenerName, int columnIndex)", "Domain": "ACTION, CONDITION", "Description": "Gets the name of a column in the result of the query.", "Parameters": [{"Name": "listenerName", "Type": "String", "Description": "name of the listener."}, {"Name": "columnIndex", "Type": "int", "Description": "index of a column in the result of the query."}], "Returns": [{"Type": "String", "Description": "name of that column or null if the column was not found."}], "Cautions": "none"},{"Function": "Query.Callback.Metadata.getStatementName()", "Signature": "String getStatementName(String listenerName)", "Domain": "ACTION, CONDITION", "Description": "Gets the name of the statement that owns the listener.", "Parameters": [{"Name": "listenerName", "Type": "String", "Description": "name of the listener."}], "Returns": [{"Type": "String", "Description": "name of the statement that owns the listener."}], "Cautions": "none"},{"Function": "Query.Callback.Metadata.getQueryName()", "Signature": "String getQueryName(String listenerName)", "Domain": "ACTION, CONDITION", "Description": "Gets the name of the query used to build the statement that owns the listener.", "Parameters": [{"Name": "listenerName", "Type": "String", "Description": "name of the listener."}], "Returns": [{"Type": "String", "Description": "name of the query used to build the statement that owns the listener."}], "Cautions": "none"},{"Function": "Query.Callback.Metadata.getColumnCount()", "Signature": "int getColumnCount(String listenerName)", "Domain": "ACTION, CONDITION", "Description": "Gets the number of columns in the result of the query.", "Parameters": [{"Name": "listenerName", "Type": "String", "Description": "name of the listener."}], "Returns": [{"Type": "int", "Description": "number of columns in the result of the query."}], "Cautions": "none"},{"Function": "Query.Callback.Metadata.getColumnType()", "Signature": "String getColumnType(String listenerName, int columnIndex)", "Domain": "ACTION, CONDITION", "Description": "Gets the type of a column in the listener.", "Parameters": [{"Name": "listenerName", "Type": "String", "Description": "name of the listener."}, {"Name": "columnIndex", "Type": "int", "Description": "index of a column in the listener."}], "Returns": [{"Type": "String", "Description": "name of the type of a column or null if the column was not found."}], "Cautions": "none"},{"Function": "Query.Callback.Metadata.findColumn()", "Signature": "int findColumn(String listenerName, String columnName)", "Domain": "ACTION, CONDITION", "Description": "Finds the index of a column in the result of the query.", "Parameters": [{"Name": "listenerName", "Type": "String", "Description": "name of the listener."}, {"Name": "columnName", "Type": "String", "Description": "name of a column in the result of the query."}], "Returns": [{"Type": "int", "Description": "index of that column or -1 if the column was not found."}], "Cautions": "none"},{"Function": "Query.Metadata.getColumnName()", "Signature": "String getColumnName(String queryName, int columnIndex)", "Domain": "ACTION, CONDITION", "Description": "Gets the name of a column in the result of the query.", "Parameters": [{"Name": "queryName", "Type": "String", "Description": "name of the query."}, {"Name": "columnIndex", "Type": "int", "Description": "index of a column in the result of the query."}], "Returns": [{"Type": "String", "Description": "name of that column or null if the column was not found."}], "Cautions": "none"},{"Function": "Query.Metadata.getText()", "Signature": "String getText(String name)", "Domain": "ACTION, CONDITION", "Description": "Gets the text of the query.", "Parameters": [{"Name": "name", "Type": "String", "Description": "name of the query."}], "Returns": [{"Type": "String", "Description": "text of the query"}], "Cautions": "none"},{"Function": "Query.Metadata.getColumnCount()", "Signature": "int getColumnCount(String queryName)", "Domain": "ACTION, CONDITION", "Description": "Gets the number of columns in the result of the query.", "Parameters": [{"Name": "queryName", "Type": "String", "Description": "name of the query."}], "Returns": [{"Type": "int", "Description": "number of columns in the result of the query."}], "Cautions": "none"},{"Function": "Query.Metadata.getColumnType()", "Signature": "String getColumnType(String queryName, int columnIndex)", "Domain": "ACTION, CONDITION", "Description": "Gets the type of a column in the result of the query.", "Parameters": [{"Name": "queryName", "Type": "String", "Description": "name of the queryName."}, {"Name": "columnIndex", "Type": "int", "Description": "index of a column in the result of the query."}], "Returns": [{"Type": "String", "Description": "name of the type of a column or null if the column was not found."}], "Cautions": "none"},{"Function": "Query.Metadata.findColumn()", "Signature": "int findColumn(String queryName, String columnName)", "Domain": "ACTION, CONDITION", "Description": "Finds the index of a column in the result of the query.", "Parameters": [{"Name": "queryName", "Type": "String", "Description": "name of the query."}, {"Name": "columnName", "Type": "String", "Description": "name of a column in the result of the query."}], "Returns": [{"Type": "int", "Description": "index of that column or -1 if the column was not found."}], "Cautions": "none"}]