[{"Function": "Database.executeSQL()", "Signature": "int executeSQL(String sql)", "Domain": "ACTION, CONDITION, BUI", "Description": "Executes an SQL statement using the connection that is set", "Parameters": [{"Name": "sql", "Type": "String", "Description": "SQL statement to execute"}], "Returns": [{"Type": "int", "Description": "Total number of records affected by the SQL statement."}], "Cautions": "none"},{"Function": "Database.getNextPageFromOffset()", "Signature": "getNextPageFromOffset(String cursorName, int startOffset, int pageSize)", "Domain": "ACTION, CONDITION, BUI", "Description": "Gets the next page from the database cursor, starting from the given offset", "Parameters": [{"Name": "cursorName", "Type": "String", "Description": "The name of the database cursor"}, {"Name": "startOffset", "Type": "the", "Description": "start offset for the page"}, {"Name": "pageSize", "Type": "int", "Description": "a default value is 500."}], "Returns": [{"Type": "Object[]", "Description": "The array of resultset data returned.\nThe array is of resultConceptType if resultConceptURI is specified else \nit is in the form of n-tuple object array where each tuple is an array of the \nvalues of resultset data returned."}], "Cautions": "none"},{"Function": "Database.getConnectionStatus()", "Signature": "int getConnectionStatus(String jdbcResourceURI)", "Domain": "ACTION, CONDITION, BUI", "Description": "This method can be used to query the health of the underlying connection pool and action can be\ntaken accordingly.", "Parameters": [{"Name": "jdbcResourceURI", "Type": "String", "Description": "The JDBC URI for which connection status is required"}], "Returns": [{"Type": "int", "Description": "0 or 1, 0 indicates that the connections are bad. 1 indicates good connections."}], "Cautions": "none"},{"Function": "Database.insert()", "Signature": "Concept insert(Concept instance)", "Domain": "ACTION, CONDITION, BUI", "Description": "Inserts the instance of the Concept passed into the associated database table.", "Parameters": [{"Name": "instance", "Type": "Concept", "Description": "The instance of the DBConcept to insert."}], "Returns": [{"Type": "Concept", "Description": "The inserted concept instance"}], "Cautions": "none"},{"Function": "Database.update()", "Signature": "int update(Concept instance)", "Domain": "ACTION, CONDITION, BUI", "Description": "Updates the instance of the Concept passed into the associated database table.", "Parameters": [{"Name": "instance", "Type": "Concept", "Description": "The concept to update database with."}], "Returns": [{"Type": "int", "Description": "Number of records updated"}], "Cautions": "none"},{"Function": "Database.executePreparedStmtByParamList()", "Signature": "int executePreparedStmtByParamList(String preparedStmt, List parameterList)", "Domain": "ACTION, CONDITION, BUI", "Description": "Executes a PreparedStatement. A prepared statement is a SQL statement where values are determined at runtime.\nThe values to be used are passed as a List of parameters.", "Parameters": [{"Name": "preparedStmt", "Type": "String", "Description": "The SQL prepared statement to execute"}, {"Name": "parameterList", "Type": "List", "Description": "Positional values to be used for binding to the prepared statement. An ArrayList that has been populated using preparedstatement utility methods only (addIntPreparedStmtParam, addStringPreparedStmtParam etc)."}], "Returns": [{"Type": "int", "Description": "Total number of records affected by the prepared statement"}], "Cautions": "none"},{"Function": "Database.getPreviousPage()", "Signature": "Object[] getPreviousPage(String cursorName, int pageSize)", "Domain": "ACTION, CONDITION, BUI", "Description": "Gets the previous page from the database cursor", "Parameters": [{"Name": "cursorName", "Type": "String", "Description": "The name of the database cursor"}, {"Name": "pageSize", "Type": "int", "Description": "a default value is 500."}], "Returns": [{"Type": "Object[]", "Description": "The array of resultset data returned.\nThe array is of resultConceptType if resultConceptURI is specified else \nit is in the form of n-tuple object array where each tuple is an array of the \nvalues of resultset data returned."}], "Cautions": "none"},{"Function": "Database.beginTransaction()", "Signature": "void beginTransaction()", "Domain": "ACTION, CONDITION, BUI", "Description": "Begins a transaction on the current connection.", "Parameters": "None.", "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Database.getNextPage()", "Signature": "Object[] getNextPage(String cursorName, int pageSize)", "Domain": "ACTION, CONDITION, BUI", "Description": "Gets the next page from the database cursor", "Parameters": [{"Name": "cursorName", "Type": "String", "Description": "The name of the database cursor"}, {"Name": "pageSize", "Type": "int", "Description": "Default value is 500."}], "Returns": [{"Type": "Object[]", "Description": "The array of resultset data returned.\nThe array is of resultConceptType if resultConceptURI is specified else \nit is in the form of n-tuple object array where each tuple is an array of the \nvalues of resultset data returned."}], "Cautions": "none"},{"Function": "Database.queryUsingPreparedStmt()", "Signature": "Concept[] queryUsingPreparedStmt(String conceptURI, String preparedStmt, Object[] args, boolean queryChildren)", "Domain": "ACTION, CONDITION, BUI", "Description": "Queries the database using the supplied prepared statement.", "Parameters": [{"Name": "conceptURI", "Type": "String", "Description": "The result concept type's URI"}, {"Name": "preparedStmt", "Type": "String", "Description": "Prepared statement to execute"}, {"Name": "args", "Type": "Object[]", "Description": "Positional values to be used for binding to the prepared statement."}, {"Name": "queryChildren", "Type": "boolean", "Description": "If set to true, concept properties are recursively queried."}], "Returns": [{"Type": "Concept"}], "Cautions": "Try to use queryUsingPreparedStmtByParamList()."},{"Function": "Database.setCurrentConnection()", "Signature": "void setCurrentConnection(String jdbcResourceURI)", "Domain": "ACTION, CONDITION, BUI", "Description": "Set the connection to use for the database operation.", "Parameters": [{"Name": "jdbcResourceURI", "Type": "String", "Description": "The JDBC resource URI which specifies the database connection to use."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Database.commit()", "Signature": "void commit()", "Domain": "ACTION, CONDITION, BUI", "Description": "Commit the transaction that is currently in process. It uses the connection\nin the current thread's context.", "Parameters": "None.", "Returns": [{"Type": "void"}], "Cautions": "The setCurrentConnection must be invoked"},{"Function": "Database.queryUsingPreparedStmtByParamList()", "Signature": "Concept[] queryUsingPreparedStmtByParamList(String conceptURI, String preparedStmt, List parameterList, boolean queryChildren)", "Domain": "ACTION, CONDITION, BUI", "Description": "Queries the database using the supplied prepared statement.", "Parameters": [{"Name": "conceptURI", "Type": "String", "Description": "The result concept type's URI"}, {"Name": "preparedStmt", "Type": "String", "Description": "Prepared statement to execute"}, {"Name": "parameterList", "Type": "List", "Description": "Positional values to be used for binding to the prepared statement. An ArrayList that has been populated using preparedstatement utility methods only (addIntPreparedStmtParam, addStringPreparedStmtParam etc)."}, {"Name": "queryChildren", "Type": "boolean", "Description": "If set to true, concept properties are recursively queried."}], "Returns": [{"Type": "Concept"}]},{"Function": "Database.executePreparedStmt()", "Signature": "int executePreparedStmt(String preparedStmt, Object[] args)", "Domain": "ACTION, CONDITION, BUI", "Description": "Executes a prepared statement using the connection that is set", "Parameters": [{"Name": "preparedStmt", "Type": "String", "Description": "The SQL prepared statement to execute"}, {"Name": "args", "Type": "Object[]", "Description": "Positional values to be used for binding to the prepared statement"}], "Returns": [{"Type": "int", "Description": "Total number of records affected by the prepared statement"}], "Cautions": "Try to use executePreparedStmtByParamList()."},{"Function": "Database.rollback()", "Signature": "void rollback()", "Domain": "ACTION, CONDITION, BUI", "Description": "Rollback the transaction that is currently in process. \nItuses the connection in the current thread's context. \nIn case of failure, it will throw associated exception.", "Parameters": "None.", "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Database.queryUsingConceptProps()", "Signature": "Concept[] queryUsingConceptProps(Concept qConcept, boolean queryChildren)", "Domain": "ACTION, CONDITION, BUI", "Description": "Queries database using the values in a concept instance.", "Parameters": [{"Name": "qConcept", "Type": "Concept", "Description": "Database is queried for matching values from this concept."}, {"Name": "queryChildren", "Type": "boolean", "Description": "If set to true, concept properties are recursively queried."}], "Returns": [{"Type": "Concept[]"}]},{"Function": "Database.createQuery()", "Signature": "String createQuery(String jdbcURI, String cursorName, String resultConceptURI, String sql, int pageSize, Object requestObj)", "Domain": "ACTION, CONDITION, BUI", "Description": "Opens a database cursor for the given sql query.", "Parameters": [{"Name": "jdbcURI", "Type": "String", "Description": "The JDBC URI of the resource to be used for getting connection."}, {"Name": "cursorName", "Type": "String", "Description": "The name of the cursor to be opened"}, {"Name": "resultTypeURI", "Type": "String", "Description": "a user can retrieve the column values by specifying column names as key"}, {"Name": "sql", "Type": "String", "Description": "The sql query string, it can be a prepared statement query or a simple statement query."}, {"Name": "pageSize", "Type": "int", "Description": "The number of concepts/records to be fetched from the database for each page"}, {"Name": "requestObj", "Type": "Object", "Description": "array of arguments"}], "Returns": [{"Type": "String", "Description": "The cursor name of the cursor opened"}], "Cautions": "none"},{"Function": "Database.assertDBInstance()", "Signature": "void assertDBInstance(Concept instance, boolean deep)", "Domain": "ACTION, CONDITION, BUI", "Description": "Asserts a DB Concept instance into working memory. \nIf deep is set to true then asserts all contained/referenced DB concept instances", "Parameters": [{"Name": "instance", "Type": "Concept", "Description": "The instance of the Concept to be asserted to working memory."}, {"Name": "deep", "Type": "boolean", "Description": "Set to true if concept properties are to be asserted recursively."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Database.unsetConnection()", "Signature": "void unsetConnection()", "Domain": "ACTION, CONDITION, BUI", "Description": "unset the connection, in the current thread's context and release back to the pool.", "Parameters": "None.", "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Database.closeQuery()", "Signature": "void closeQuery(String cursorName)", "Domain": "ACTION, CONDITION, BUI", "Description": "Closes the cursor for the query", "Parameters": [{"Name": "cursorName", "Type": "String", "Description": "The name of the database cursor to be closed"}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Database.queryUsingSQL()", "Signature": "Concept[] queryUsingSQL(String conceptURI, String sql, boolean queryChildren)", "Domain": "ACTION, CONDITION, BUI", "Description": "Queries the database and returns concepts", "Parameters": [{"Name": "conceptURI", "Type": "String", "Description": "The result concept type's URI"}, {"Name": "sql", "Type": "String", "Description": "SQL statement to execute"}, {"Name": "queryChildren", "Type": "boolean", "Description": "If set to true, concept properties are recursively queried."}], "Returns": [{"Type": "Concept[]", "Description": "Result array concepts"}], "Cautions": "none"},{"Function": "Database.queryUsingPrimaryKeys()", "Signature": "Concept[] queryUsingPrimaryKeys(String conceptURI, SimpleEvent pKeyEvent, boolean queryChildren)", "Domain": "ACTION, CONDITION, BUI", "Description": "Queries the database using primary key values provided in an Event.", "Parameters": [{"Name": "conceptURI", "Type": "String", "Description": "The result concept type's URI"}, {"Name": "pKeyEvent", "Type": "SimpleEvent", "Description": "Event that contains primary key values to be used. Properties must match primary key properties in result concept."}, {"Name": "queryChildren", "Type": "boolean", "Description": "If set to true, concept properties are recursively queried."}], "Returns": [{"Type": "Concept[]", "Description": "Array of result concepts"}], "Cautions": "none"},{"Function": "Database.getPreviousPageFromOffset()", "Signature": "getPreviousPageFromOffset(String cursorName, int startOffset, int pageSize)", "Domain": "ACTION, CONDITION, BUI", "Description": "Gets the previous page from the database cursor, starting from the given offset", "Parameters": [{"Name": "cursorName", "Type": "String", "Description": "The name of the database cursor"}, {"Name": "startOffset", "Type": "the", "Description": "start offset for the page"}, {"Name": "pageSize", "Type": "int", "Description": "a default value of 500 is used."}], "Returns": [{"Type": "Object[]", "Description": "The array of resultset data returned.\nThe array is of resultConceptType if resultConceptURI is specified else \nit is in the form of n-tuple object array where each tuple is an array of the \nvalues of resultset data returned."}], "Cautions": "none"},{"Function": "Database.delete()", "Signature": "int delete(Concept instance, boolean cascade)", "Domain": "ACTION, CONDITION, BUI", "Description": "Deletes the instance of the Concept passed from the associated database table.", "Parameters": [{"Name": "instance", "Type": "Concept", "Description": "The concept to delete from the database."}, {"Name": "cascade", "Type": "boolean", "Description": "Set to true if delete should cascade to concept properties."}], "Returns": [{"Type": "int", "Description": "Total number of records deleted and updated."}], "Cautions": "none"},{"Function": "Database.sp.getConceptsAtIndex()", "Signature": "Concept[] getConceptsAtIndex(Object handle, int index, String conceptURI)", "Domain": "ACTION", "Description": "This function is to be used where the output at the given index is a database cursor and where the \ncontents of the underlying cursor can be mapped to a db concept.", "Parameters": [{"Name": "handle", "Type": "Object", "Description": "initStoredProc()"}, {"Name": "index", "Type": "int", "Description": "Index at which output is to be obtained"}, {"Name": "conceptURI", "Type": "String", "Description": "available at this index."}], "Returns": [{"Type": "Concept[]"}]},{"Function": "Database.sp.closeStoredProc()", "Signature": "void closeStoredProc(Object handle)", "Domain": "ACTION", "Description": "Closes the stored procedure.", "Parameters": [{"Name": "handle", "Type": "Object", "Description": "initStoredProc()"}], "Returns": [{"Type": "void"}]},{"Function": "Database.sp.setOutputParameterType()", "Signature": "void setOutputParameterType(Object handle, int index, int beType)", "Domain": "ACTION", "Description": "For stored procedure with $1out$1 parameters, sets the sqltype of the return type at the given index.", "Parameters": [{"Name": "handle", "Type": "Object", "Description": "initStoredProc()"}, {"Name": "index", "Type": "int", "Description": "Index at which to set the parameter type"}, {"Name": "beType", "Type": "int", "Description": "STRING=0; INT=1; LONG=2; DOUBLE=3; BOOLEAN=4; DATETIME=5; CONCEPT=6; CLOB=7;"}], "Returns": [{"Type": "void"}]},{"Function": "Database.sp.initStoredProc()", "Signature": "Object initStoredProc (String storedProc)", "Domain": "ACTION", "Description": "Initializes the given stored procedure", "Parameters": [{"Name": "storedProc", "Type": "String", "Description": "call sp_name () or call sp_name (?, ?)"}], "Returns": [{"Type": "Object"}]},{"Function": "Database.sp.executeStoredProc()", "Signature": "void executeStoredProc(Object handle)", "Domain": "ACTION", "Description": "Executes the given stored procedure.", "Parameters": [{"Name": "handle", "Type": "Object", "Description": "initStoredProc()"}], "Returns": [{"Type": "void"}]},{"Function": "Database.sp.setInputParameter()", "Signature": "void setInputParameter(Object handle, int index, Object value)", "Domain": "ACTION", "Description": "Sets input parameter of the stored procedure at the given index.\nIndices are 1-based.", "Parameters": [{"Name": "handle", "Type": "Object", "Description": "initStoredProc()"}, {"Name": "index", "Type": "int", "Description": "Index at which to set input parameter."}, {"Name": "value", "Type": "Object", "Description": "Value to set at the given index."}], "Returns": [{"Type": "void"}]},{"Function": "Database.sp.getObjectAtIndex()", "Signature": "Object getObjectAtIndex(Object handle, int index)", "Domain": "ACTION", "Description": "Queries the database using supplied prepared statement.", "Parameters": [{"Name": "handle", "Type": "Object", "Description": "initStoredProc()"}, {"Name": "index", "Type": "int", "Description": "Index at which output is to be obtained."}], "Returns": [{"Type": "Object"}]},{"Function": "Database.sp.readClobContent()", "Signature": "String readClobContent(Object clob)", "Domain": "ACTION", "Description": "Reads content from the specified CLOB.", "Parameters": [{"Name": "clob", "Type": "Object"}], "Returns": [{"Type": "String", "Description": "null"}], "Example": "Object clob = Database.sp.getObjectAtIndex(handle, 1);\nString content = Database.sp.readClobContent(clob);\nwhile (content != null) {\n//Use content as per your requirement\ncontent = Database.sp.readClobContent(clob);\n}"},{"Function": "Database.Util.addIntParam()", "Signature": "void addIntParam (List list, Object value)", "Domain": "ACTION", "Description": "Adds the specified integer element to the PreparedStatement parameters list.", "Parameters": [{"Name": "list", "Type": "List", "Description": "The list of PreparedStatement parameters."}, {"Name": "value", "Type": "Object", "Description": "int value."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Database.Util.addStringParam()", "Signature": "void addStringParam (List paramList, Object value)", "Domain": "ACTION", "Description": "Adds the specified string element to the PreparedStatement parameters list.", "Parameters": [{"Name": "list", "Type": "List", "Description": "The list of PreparedStatement parameters."}, {"Name": "value", "Type": "Object", "Description": "string value."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Database.Util.addDoubleParam()", "Signature": "void addDoubleParam (List paramList, Object value)", "Domain": "ACTION", "Description": "Adds the specified double element to the PreparedStatement parameters list.", "Parameters": [{"Name": "list", "Type": "List", "Description": "The list of PreparedStatement parameters."}, {"Name": "value", "Type": "Object", "Description": "double value."}], "Returns": [{"Type": "void"}], "Cautions": "none"},{"Function": "Database.Util.addParam()", "Signature": "void addParam ( List paramList, Object value)", "Domain": "ACTION", "Description": "Adds the specified Object element to the PreparedStatement parameters list.", "Parameters": [{"Name": "list", "Type": "List", "Description": "The list of PreparedStatement parameters."}, {"Name": "value", "Type": "Object", "Description": "Object value."}], "Returns": [{"Type": "void"}], "Cautions": "For improved performance use methods specific to dataTypes such as - addIntPreparedStmtParam, addStringPreparedStmtParam etc"}]